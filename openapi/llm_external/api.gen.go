// Package llm_external_oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package llm_external_oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// GetPtySessionResponse defines model for GetPtySessionResponse.
type GetPtySessionResponse struct {
	PtySessionId             *string `json:"pty_session_id,omitempty"`
	SessionConnectedServerIp *string `json:"session_connected_server_ip,omitempty"`
	SessionCreatedBy         *string `json:"session_created_by,omitempty"`

	// TicketId ID of the change request associated with this PTY session
	TicketId *string `json:"ticket_id,omitempty"`
}

// GetApiV1PtySessionsParams defines parameters for GetApiV1PtySessions.
type GetApiV1PtySessionsParams struct {
	// ChangeRequestId ID of the change request
	ChangeRequestId string `form:"change_request_id" json:"change_request_id"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1PtySessions request
	GetApiV1PtySessions(ctx context.Context, params *GetApiV1PtySessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1PtySessions(ctx context.Context, params *GetApiV1PtySessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PtySessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1PtySessionsRequest generates requests for GetApiV1PtySessions
func NewGetApiV1PtySessionsRequest(server string, params *GetApiV1PtySessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/pty_sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "change_request_id", runtime.ParamLocationQuery, params.ChangeRequestId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1PtySessionsWithResponse request
	GetApiV1PtySessionsWithResponse(ctx context.Context, params *GetApiV1PtySessionsParams, reqEditors ...RequestEditorFn) (*GetApiV1PtySessionsResponse, error)
}

type GetApiV1PtySessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GetPtySessionResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1PtySessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PtySessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1PtySessionsWithResponse request returning *GetApiV1PtySessionsResponse
func (c *ClientWithResponses) GetApiV1PtySessionsWithResponse(ctx context.Context, params *GetApiV1PtySessionsParams, reqEditors ...RequestEditorFn) (*GetApiV1PtySessionsResponse, error) {
	rsp, err := c.GetApiV1PtySessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PtySessionsResponse(rsp)
}

// ParseGetApiV1PtySessionsResponse parses an HTTP response from a GetApiV1PtySessionsWithResponse call
func ParseGetApiV1PtySessionsResponse(rsp *http.Response) (*GetApiV1PtySessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PtySessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GetPtySessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all PTY sessions for a change request
	// (GET /api/v1/pty_sessions)
	GetApiV1PtySessions(c *gin.Context, params GetApiV1PtySessionsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1PtySessions operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1PtySessions(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1PtySessionsParams

	// ------------- Required query parameter "change_request_id" -------------

	if paramValue := c.Query("change_request_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument change_request_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "change_request_id", c.Request.URL.Query(), &params.ChangeRequestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter change_request_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1PtySessions(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/pty_sessions", wrapper.GetApiV1PtySessions)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xT22rcPBB+FTH/f+nY3iahxXeGlrIkLUuTlpawLIo8u1ZqS4pmvI0Jfvci2e0espRc",
	"2ZZH38x3mGdQtnXWoGGC4hlI1djK+PoRecH9DRJpa74gOWsIww/nrUPPGmOZ435FY9FKV+GEe4dQALHX",
	"ZgNDAn9+K2sMKsZqRei36Ffa/bveowzV9/3JMtbqJ/LUtEJSXjvW1kAB8/fCrgXXKFQtzQaFx8cOiYUk",
	"skoHVPFLcy241iQWtz/E1BOS4z7D3xN7/4CK4wmh6rzm/ibINepQOn2FfdlxHb50mKJGWaGHBIxsA8D3",
	"s3IxP7vCftdFxlswBFBt1vYllXIxF2vrRTkXjLIVbIXrmmZ/aFEhS91QgNXcBNzr60/iwxOjN7IR5WIO",
	"CWzR0wg5S/M0Dwpah0Y6DQWcp3l6Dgk4yXWkk0mns+0s27M3nm+QwyMkQIYJ5xUUISql099mu7xQxPKy",
	"RUZPUNy91iFIRu0eO/T9TrqxaDUVBc8TCB/aYwUF+w6TKbsnojIsQ/EY4EjiTZ6Hh7KG0UQ+0rlGq8go",
	"e6Aw4fMenmZs48X/Pa6hgP+y3dZk08pkp/dlFx/pvZycPpRiz0kSHtlr3GIlqFMKidZd0/QB5iK/eJmO",
	"z5bF2namChWXI60joc2UgnHnBHpv/UGIozv78b1bBsWoa1vp+9FeIQ8jRzGT8qV5LDfB7khq0gKWw2va",
	"xfFOReVreQsJdL4JK8XsqMiyp3xG7RN7OZMpubSTnFb3lCrrXXF5medvYUiOca6tks0BUpFlTTisLXG8",
	"9g7CKBOH4/tBhtNbN4V0n/OwHH4HAAD//wHAso5cBQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
