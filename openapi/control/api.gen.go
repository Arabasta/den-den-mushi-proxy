// Package control_oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package control_oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ConnectionPurpose.
const (
	ChangeRequest ConnectionPurpose = "change_request"
	HealthCheck   ConnectionPurpose = "health_check"
)

// Defines values for ConnectionStatus.
const (
	ConnectionStatusActive ConnectionStatus = "active"
	ConnectionStatusClosed ConnectionStatus = "closed"
)

// Defines values for PtySessionState.
const (
	PtySessionStateActive  PtySessionState = "active"
	PtySessionStateClosed  PtySessionState = "closed"
	PtySessionStateCreated PtySessionState = "created"
)

// Defines values for RegexFilterFilterType.
const (
	BLACKLIST RegexFilterFilterType = "BLACKLIST"
	WHITELIST RegexFilterFilterType = "WHITELIST"
)

// Defines values for StartRole.
const (
	Implementor StartRole = "implementor"
	Observer    StartRole = "observer"
)

// ChangeRequestSessionsResponse defines model for ChangeRequestSessionsResponse.
type ChangeRequestSessionsResponse struct {
	ChangeEndTime       *time.Time              `json:"change_end_time,omitempty"`
	ChangeId            *string                 `json:"change_id,omitempty"`
	ChangeRequestStatus *string                 `json:"change_request_status,omitempty"`
	ChangeStartTime     *time.Time              `json:"change_start_time,omitempty"`
	Country             *[]string               `json:"country,omitempty"`
	HostSessionDetails  *[]HostSessionDetailsV2 `json:"host_session_details,omitempty"`
	ImplementorGroups   *[]string               `json:"implementor_groups,omitempty"`
	Lob                 *string                 `json:"lob,omitempty"`
	Summary             *string                 `json:"summary,omitempty"`
}

// Connection defines model for Connection.
type Connection struct {
	Id           *string    `json:"id,omitempty"`
	JoinTime     *time.Time `json:"join_time,omitempty"`
	LeaveTime    *time.Time `json:"leave_time,omitempty"`
	PtySessionId *string    `json:"pty_session_id,omitempty"`

	// StartRole Start role for joining existing PTY sessions
	StartRole *StartRole `json:"start_role,omitempty"`

	// Status Status of the connection
	Status *ConnectionStatus `json:"status,omitempty"`
	UserId *string           `json:"user_id,omitempty"`
}

// ConnectionPurpose Type of connection being established
type ConnectionPurpose string

// ConnectionStatus Status of the connection
type ConnectionStatus string

// GetIExpressHostsAndSessionDetailsResponse defines model for GetIExpressHostsAndSessionDetailsResponse.
type GetIExpressHostsAndSessionDetailsResponse struct {
	HostSessionDetails *[]HostSessionDetailsV2 `json:"host_session_details,omitempty"`
}

// GetIExpressResponse defines model for GetIExpressResponse.
type GetIExpressResponse struct {
	Items    *[]IExpress `json:"items,omitempty"`
	Page     *int        `json:"page,omitempty"`
	PageSize *int        `json:"page_size,omitempty"`

	// TotalCount total number of iexpress requests matching the filter
	TotalCount *int `json:"total_count,omitempty"`
}

// HealthcheckSessionsResponse defines model for HealthcheckSessionsResponse.
type HealthcheckSessionsResponse struct {
	HostSessionDetails *[]HostSessionDetails `json:"host_session_details,omitempty"`
}

// Host defines model for Host.
type Host struct {
	AppCode     string  `json:"app_code"`
	Country     *string `json:"country,omitempty"`
	Environment string  `json:"environment"`
	IpAddress   string  `json:"ip_address"`
	Name        string  `json:"name"`
}

// HostSessionDetails defines model for HostSessionDetails.
type HostSessionDetails struct {
	Host        *Host                `json:"host,omitempty"`
	OsUsers     *[]string            `json:"os_users,omitempty"`
	PtySessions *[]PtySessionSummary `json:"pty_sessions,omitempty"`
}

// HostSessionDetailsV2 defines model for HostSessionDetailsV2.
type HostSessionDetailsV2 struct {
	CyberarkObjects *[]string            `json:"cyberark_objects,omitempty"`
	Host            *Host                `json:"host,omitempty"`
	OsUsers         *[]string            `json:"os_users,omitempty"`
	PtySessions     *[]PtySessionSummary `json:"pty_sessions,omitempty"`
}

// IExpress defines model for IExpress.
type IExpress struct {
	Action          *string   `json:"action,omitempty"`
	AppImpacted     []string  `json:"app_impacted"`
	ApproverGroup1  *string   `json:"approver_group1,omitempty"`
	ApproverGroup2  *string   `json:"approver_group2,omitempty"`
	EndTime         time.Time `json:"end_time"`
	Lob             string    `json:"lob"`
	MdApproverGroup *string   `json:"md_approver_group,omitempty"`
	OriginCountry   string    `json:"origin_country"`
	RelatedTicket   *string   `json:"related_ticket,omitempty"`
	RequestId       string    `json:"request_id"`
	Requestor       string    `json:"requestor"`
	StartTime       time.Time `json:"start_time"`
	State           string    `json:"state"`
}

// JoinRequest defines model for JoinRequest.
type JoinRequest struct {
	// PtySessionId ID of the existing PTY session to join, user will be validated against this session's initial connection details
	PtySessionId string `json:"pty_session_id"`

	// StartRole Start role for joining existing PTY sessions
	StartRole StartRole `json:"start_role"`
}

// PtySession defines model for PtySession.
type PtySession struct {
	// ChangeId ID of the change request associated with this PTY session, if applicable
	ChangeId *string `json:"change_id,omitempty"`

	// Connections List of connections to this PTY session's life time
	Connections  *[]Connection `json:"connections,omitempty"`
	CreatedBy    *string       `json:"created_by,omitempty"`
	EndTime      *time.Time    `json:"end_time,omitempty"`
	Id           *string       `json:"id,omitempty"`
	LastActivity *time.Time    `json:"last_activity,omitempty"`

	// Purpose Type of connection being established
	Purpose   *ConnectionPurpose `json:"purpose,omitempty"`
	StartTime *time.Time         `json:"start_time,omitempty"`

	// State State of the PTY session
	State *PtySessionState `json:"state,omitempty"`
}

// PtySessionState State of the PTY session
type PtySessionState string

// PtySessionSummary defines model for PtySessionSummary.
type PtySessionSummary struct {
	ChangeId *string `json:"change_id,omitempty"`

	// Connections List of connections to this PTY session's life time
	Connections  []Connection `json:"connections"`
	CreatedBy    string       `json:"created_by"`
	EndTime      *time.Time   `json:"end_time,omitempty"`
	Id           string       `json:"id"`
	LastActivity *time.Time   `json:"last_activity,omitempty"`

	// Purpose Type of connection being established
	Purpose   ConnectionPurpose `json:"purpose"`
	StartTime *time.Time        `json:"start_time,omitempty"`

	// State State of the PTY session
	State PtySessionState `json:"state"`
}

// RegexFilter defines model for RegexFilter.
type RegexFilter struct {
	CreatedAt  *time.Time             `json:"created_at,omitempty"`
	CreatedBy  *string                `json:"created_by,omitempty"`
	DeletedAt  *time.Time             `json:"deleted_at,omitempty"`
	DeletedBy  *string                `json:"deleted_by,omitempty"`
	FilterType *RegexFilterFilterType `json:"filter_type,omitempty"`
	Id         *int                   `json:"id,omitempty"`
	IsEnabled  *bool                  `json:"is_enabled,omitempty"`
	OuGroup    *string                `json:"ou_group,omitempty"`
	Pattern    *string                `json:"pattern,omitempty"`
	UpdatedAt  *time.Time             `json:"updated_at,omitempty"`
	UpdatedBy  *string                `json:"updated_by,omitempty"`
}

// RegexFilterFilterType defines model for RegexFilter.FilterType.
type RegexFilterFilterType string

// ServerInfo Info about the target server for the PTY session
type ServerInfo struct {
	// OsUser The Os user to connect as
	OsUser string `json:"os_user"`

	// ServerIp IP address of the target server
	ServerIp string `json:"server_ip"`
}

// StartRequest defines model for StartRequest.
type StartRequest struct {
	// ChangeId Only required if purpose is "change_request", ID of the change request to connect to
	ChangeId *string `json:"change_id,omitempty"`

	// Purpose Type of connection being established
	Purpose ConnectionPurpose `json:"purpose"`

	// Server Info about the target server for the PTY session
	Server ServerInfo `json:"server"`
}

// StartRole Start role for joining existing PTY sessions
type StartRole string

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// ProxyUrl Load balancer URL for proxy group (e.g., `https://proxy.os.com`, `https://proxy.db.com`)
	ProxyUrl string `json:"proxyUrl"`

	// Token JWT token for proxy
	Token string `json:"token"`
}

// PostApiV1BlacklistRegexJSONBody defines parameters for PostApiV1BlacklistRegex.
type PostApiV1BlacklistRegexJSONBody struct {
	// Pattern The regular expression pattern
	Pattern string `json:"pattern"`
}

// PutApiV1BlacklistRegexIdJSONBody defines parameters for PutApiV1BlacklistRegexId.
type PutApiV1BlacklistRegexIdJSONBody struct {
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// Pattern Updated regular expression pattern
	Pattern string `json:"pattern"`
}

// GetApiV1ChangeRequestsParams defines parameters for GetApiV1ChangeRequests.
type GetApiV1ChangeRequestsParams struct {
	TicketIds         *[]string `form:"ticket_ids,omitempty" json:"ticket_ids,omitempty"`
	ImplementorGroups *[]string `form:"implementor_groups,omitempty" json:"implementor_groups,omitempty"`
	Lob               *string   `form:"lob,omitempty" json:"lob,omitempty"`
	Country           *string   `form:"country,omitempty" json:"country,omitempty"`

	// StartTime Expected format - RFC3339
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Expected format - RFC3339
	EndTime *time.Time `form:"end_time,omitempty" json:"end_time,omitempty"`

	// PtySessionState Does not filter out CRs, field not for users
	PtySessionState *PtySessionState `form:"pty_session_state,omitempty" json:"pty_session_state,omitempty"`
	Page            *int             `form:"page,omitempty" json:"page,omitempty"`
	PageSize        *int             `form:"page_size,omitempty" json:"page_size,omitempty"`
	TotalCount      *bool            `form:"total_count,omitempty" json:"total_count,omitempty"`
}

// GetApiV1HealthcheckParams defines parameters for GetApiV1Healthcheck.
type GetApiV1HealthcheckParams struct {
	Hostname    *string `form:"hostname,omitempty" json:"hostname,omitempty"`
	Ip          *string `form:"ip,omitempty" json:"ip,omitempty"`
	Appcode     *string `form:"appcode,omitempty" json:"appcode,omitempty"`
	Lob         *string `form:"lob,omitempty" json:"lob,omitempty"`
	OsType      *string `form:"os_type,omitempty" json:"os_type,omitempty"`
	Status      *string `form:"status,omitempty" json:"status,omitempty"`
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
	Country     *string `form:"country,omitempty" json:"country,omitempty"`
	SystemType  *string `form:"system_type,omitempty" json:"system_type,omitempty"`

	// PtySessionState Does not filter out hosts, field not meant for users
	PtySessionState *PtySessionState `form:"pty_session_state,omitempty" json:"pty_session_state,omitempty"`
	Page            *int             `form:"page,omitempty" json:"page,omitempty"`
	PageSize        *int             `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetApiV1IexpressParams defines parameters for GetApiV1Iexpress.
type GetApiV1IexpressParams struct {
	RequestIds    *[]string `form:"request_ids,omitempty" json:"request_ids,omitempty"`
	Requestor     *string   `form:"requestor,omitempty" json:"requestor,omitempty"`
	Lob           *string   `form:"lob,omitempty" json:"lob,omitempty"`
	OriginCountry *string   `form:"origin_country,omitempty" json:"origin_country,omitempty"`
	AppImpacted   *[]string `form:"app_impacted,omitempty" json:"app_impacted,omitempty"`

	// StartTime Expected format - RFC3339
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Expected format - RFC3339
	EndTime    *time.Time `form:"end_time,omitempty" json:"end_time,omitempty"`
	Page       *int       `form:"page,omitempty" json:"page,omitempty"`
	PageSize   *int       `form:"page_size,omitempty" json:"page_size,omitempty"`
	TotalCount *bool      `form:"total_count,omitempty" json:"total_count,omitempty"`
}

// PostApiV1WhitelistRegexJSONBody defines parameters for PostApiV1WhitelistRegex.
type PostApiV1WhitelistRegexJSONBody struct {
	// Pattern The regular expression pattern
	Pattern string `json:"pattern"`
}

// PutApiV1WhitelistRegexIdJSONBody defines parameters for PutApiV1WhitelistRegexId.
type PutApiV1WhitelistRegexIdJSONBody struct {
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// Pattern Updated regular expression pattern
	Pattern string `json:"pattern"`
}

// PostApiV1BlacklistRegexJSONRequestBody defines body for PostApiV1BlacklistRegex for application/json ContentType.
type PostApiV1BlacklistRegexJSONRequestBody PostApiV1BlacklistRegexJSONBody

// PutApiV1BlacklistRegexIdJSONRequestBody defines body for PutApiV1BlacklistRegexId for application/json ContentType.
type PutApiV1BlacklistRegexIdJSONRequestBody PutApiV1BlacklistRegexIdJSONBody

// PostApiV1PtyTokenJoinJSONRequestBody defines body for PostApiV1PtyTokenJoin for application/json ContentType.
type PostApiV1PtyTokenJoinJSONRequestBody = JoinRequest

// PostApiV1PtyTokenStartJSONRequestBody defines body for PostApiV1PtyTokenStart for application/json ContentType.
type PostApiV1PtyTokenStartJSONRequestBody = StartRequest

// PostApiV1WhitelistRegexJSONRequestBody defines body for PostApiV1WhitelistRegex for application/json ContentType.
type PostApiV1WhitelistRegexJSONRequestBody PostApiV1WhitelistRegexJSONBody

// PutApiV1WhitelistRegexIdJSONRequestBody defines body for PutApiV1WhitelistRegexId for application/json ContentType.
type PutApiV1WhitelistRegexIdJSONRequestBody PutApiV1WhitelistRegexIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1BlacklistRegex request
	GetApiV1BlacklistRegex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1BlacklistRegexWithBody request with any body
	PostApiV1BlacklistRegexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1BlacklistRegex(ctx context.Context, body PostApiV1BlacklistRegexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1BlacklistRegexId request
	DeleteApiV1BlacklistRegexId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1BlacklistRegexIdWithBody request with any body
	PutApiV1BlacklistRegexIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1BlacklistRegexId(ctx context.Context, id int, body PutApiV1BlacklistRegexIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ChangeRequests request
	GetApiV1ChangeRequests(ctx context.Context, params *GetApiV1ChangeRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Healthcheck request
	GetApiV1Healthcheck(ctx context.Context, params *GetApiV1HealthcheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Iexpress request
	GetApiV1Iexpress(ctx context.Context, params *GetApiV1IexpressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1IexpressRequestId request
	GetApiV1IexpressRequestId(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PtyTokenJoinWithBody request with any body
	PostApiV1PtyTokenJoinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PtyTokenJoin(ctx context.Context, body PostApiV1PtyTokenJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PtyTokenStartWithBody request with any body
	PostApiV1PtyTokenStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PtyTokenStart(ctx context.Context, body PostApiV1PtyTokenStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1WhitelistRegex request
	GetApiV1WhitelistRegex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1WhitelistRegexWithBody request with any body
	PostApiV1WhitelistRegexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1WhitelistRegex(ctx context.Context, body PostApiV1WhitelistRegexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1WhitelistRegexId request
	DeleteApiV1WhitelistRegexId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1WhitelistRegexIdWithBody request with any body
	PutApiV1WhitelistRegexIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1WhitelistRegexId(ctx context.Context, id int, body PutApiV1WhitelistRegexIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1BlacklistRegex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1BlacklistRegexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1BlacklistRegexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1BlacklistRegexRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1BlacklistRegex(ctx context.Context, body PostApiV1BlacklistRegexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1BlacklistRegexRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1BlacklistRegexId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1BlacklistRegexIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1BlacklistRegexIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1BlacklistRegexIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1BlacklistRegexId(ctx context.Context, id int, body PutApiV1BlacklistRegexIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1BlacklistRegexIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ChangeRequests(ctx context.Context, params *GetApiV1ChangeRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChangeRequestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Healthcheck(ctx context.Context, params *GetApiV1HealthcheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1HealthcheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Iexpress(ctx context.Context, params *GetApiV1IexpressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IexpressRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1IexpressRequestId(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IexpressRequestIdRequest(c.Server, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PtyTokenJoinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PtyTokenJoinRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PtyTokenJoin(ctx context.Context, body PostApiV1PtyTokenJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PtyTokenJoinRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PtyTokenStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PtyTokenStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PtyTokenStart(ctx context.Context, body PostApiV1PtyTokenStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PtyTokenStartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1WhitelistRegex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WhitelistRegexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1WhitelistRegexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1WhitelistRegexRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1WhitelistRegex(ctx context.Context, body PostApiV1WhitelistRegexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1WhitelistRegexRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1WhitelistRegexId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1WhitelistRegexIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1WhitelistRegexIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1WhitelistRegexIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1WhitelistRegexId(ctx context.Context, id int, body PutApiV1WhitelistRegexIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1WhitelistRegexIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1BlacklistRegexRequest generates requests for GetApiV1BlacklistRegex
func NewGetApiV1BlacklistRegexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/blacklist/regex")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1BlacklistRegexRequest calls the generic PostApiV1BlacklistRegex builder with application/json body
func NewPostApiV1BlacklistRegexRequest(server string, body PostApiV1BlacklistRegexJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1BlacklistRegexRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1BlacklistRegexRequestWithBody generates requests for PostApiV1BlacklistRegex with any type of body
func NewPostApiV1BlacklistRegexRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/blacklist/regex")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1BlacklistRegexIdRequest generates requests for DeleteApiV1BlacklistRegexId
func NewDeleteApiV1BlacklistRegexIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/blacklist/regex/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1BlacklistRegexIdRequest calls the generic PutApiV1BlacklistRegexId builder with application/json body
func NewPutApiV1BlacklistRegexIdRequest(server string, id int, body PutApiV1BlacklistRegexIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1BlacklistRegexIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1BlacklistRegexIdRequestWithBody generates requests for PutApiV1BlacklistRegexId with any type of body
func NewPutApiV1BlacklistRegexIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/blacklist/regex/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ChangeRequestsRequest generates requests for GetApiV1ChangeRequests
func NewGetApiV1ChangeRequestsRequest(server string, params *GetApiV1ChangeRequestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/change_requests/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TicketIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ticket_ids", runtime.ParamLocationQuery, *params.TicketIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImplementorGroups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "implementor_groups", runtime.ParamLocationQuery, *params.ImplementorGroups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lob", runtime.ParamLocationQuery, *params.Lob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Country != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PtySessionState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pty_session_state", runtime.ParamLocationQuery, *params.PtySessionState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TotalCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "total_count", runtime.ParamLocationQuery, *params.TotalCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1HealthcheckRequest generates requests for GetApiV1Healthcheck
func NewGetApiV1HealthcheckRequest(server string, params *GetApiV1HealthcheckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/healthcheck/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Hostname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostname", runtime.ParamLocationQuery, *params.Hostname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, *params.Ip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Appcode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "appcode", runtime.ParamLocationQuery, *params.Appcode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lob", runtime.ParamLocationQuery, *params.Lob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OsType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os_type", runtime.ParamLocationQuery, *params.OsType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Country != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SystemType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "system_type", runtime.ParamLocationQuery, *params.SystemType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PtySessionState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pty_session_state", runtime.ParamLocationQuery, *params.PtySessionState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IexpressRequest generates requests for GetApiV1Iexpress
func NewGetApiV1IexpressRequest(server string, params *GetApiV1IexpressParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/iexpress/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "request_ids", runtime.ParamLocationQuery, *params.RequestIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Requestor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestor", runtime.ParamLocationQuery, *params.Requestor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lob", runtime.ParamLocationQuery, *params.Lob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OriginCountry != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "origin_country", runtime.ParamLocationQuery, *params.OriginCountry); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppImpacted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_impacted", runtime.ParamLocationQuery, *params.AppImpacted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TotalCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "total_count", runtime.ParamLocationQuery, *params.TotalCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IexpressRequestIdRequest generates requests for GetApiV1IexpressRequestId
func NewGetApiV1IexpressRequestIdRequest(server string, requestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "request_id", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/iexpress/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PtyTokenJoinRequest calls the generic PostApiV1PtyTokenJoin builder with application/json body
func NewPostApiV1PtyTokenJoinRequest(server string, body PostApiV1PtyTokenJoinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PtyTokenJoinRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PtyTokenJoinRequestWithBody generates requests for PostApiV1PtyTokenJoin with any type of body
func NewPostApiV1PtyTokenJoinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/pty_token/join")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PtyTokenStartRequest calls the generic PostApiV1PtyTokenStart builder with application/json body
func NewPostApiV1PtyTokenStartRequest(server string, body PostApiV1PtyTokenStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PtyTokenStartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PtyTokenStartRequestWithBody generates requests for PostApiV1PtyTokenStart with any type of body
func NewPostApiV1PtyTokenStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/pty_token/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1WhitelistRegexRequest generates requests for GetApiV1WhitelistRegex
func NewGetApiV1WhitelistRegexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/whitelist/regex")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1WhitelistRegexRequest calls the generic PostApiV1WhitelistRegex builder with application/json body
func NewPostApiV1WhitelistRegexRequest(server string, body PostApiV1WhitelistRegexJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1WhitelistRegexRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1WhitelistRegexRequestWithBody generates requests for PostApiV1WhitelistRegex with any type of body
func NewPostApiV1WhitelistRegexRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/whitelist/regex")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1WhitelistRegexIdRequest generates requests for DeleteApiV1WhitelistRegexId
func NewDeleteApiV1WhitelistRegexIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/whitelist/regex/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1WhitelistRegexIdRequest calls the generic PutApiV1WhitelistRegexId builder with application/json body
func NewPutApiV1WhitelistRegexIdRequest(server string, id int, body PutApiV1WhitelistRegexIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1WhitelistRegexIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1WhitelistRegexIdRequestWithBody generates requests for PutApiV1WhitelistRegexId with any type of body
func NewPutApiV1WhitelistRegexIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/whitelist/regex/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1BlacklistRegexWithResponse request
	GetApiV1BlacklistRegexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1BlacklistRegexResponse, error)

	// PostApiV1BlacklistRegexWithBodyWithResponse request with any body
	PostApiV1BlacklistRegexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1BlacklistRegexResponse, error)

	PostApiV1BlacklistRegexWithResponse(ctx context.Context, body PostApiV1BlacklistRegexJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1BlacklistRegexResponse, error)

	// DeleteApiV1BlacklistRegexIdWithResponse request
	DeleteApiV1BlacklistRegexIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiV1BlacklistRegexIdResponse, error)

	// PutApiV1BlacklistRegexIdWithBodyWithResponse request with any body
	PutApiV1BlacklistRegexIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1BlacklistRegexIdResponse, error)

	PutApiV1BlacklistRegexIdWithResponse(ctx context.Context, id int, body PutApiV1BlacklistRegexIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1BlacklistRegexIdResponse, error)

	// GetApiV1ChangeRequestsWithResponse request
	GetApiV1ChangeRequestsWithResponse(ctx context.Context, params *GetApiV1ChangeRequestsParams, reqEditors ...RequestEditorFn) (*GetApiV1ChangeRequestsResponse, error)

	// GetApiV1HealthcheckWithResponse request
	GetApiV1HealthcheckWithResponse(ctx context.Context, params *GetApiV1HealthcheckParams, reqEditors ...RequestEditorFn) (*GetApiV1HealthcheckResponse, error)

	// GetApiV1IexpressWithResponse request
	GetApiV1IexpressWithResponse(ctx context.Context, params *GetApiV1IexpressParams, reqEditors ...RequestEditorFn) (*GetApiV1IexpressResponse, error)

	// GetApiV1IexpressRequestIdWithResponse request
	GetApiV1IexpressRequestIdWithResponse(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*GetApiV1IexpressRequestIdResponse, error)

	// PostApiV1PtyTokenJoinWithBodyWithResponse request with any body
	PostApiV1PtyTokenJoinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenJoinResponse, error)

	PostApiV1PtyTokenJoinWithResponse(ctx context.Context, body PostApiV1PtyTokenJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenJoinResponse, error)

	// PostApiV1PtyTokenStartWithBodyWithResponse request with any body
	PostApiV1PtyTokenStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenStartResponse, error)

	PostApiV1PtyTokenStartWithResponse(ctx context.Context, body PostApiV1PtyTokenStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenStartResponse, error)

	// GetApiV1WhitelistRegexWithResponse request
	GetApiV1WhitelistRegexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1WhitelistRegexResponse, error)

	// PostApiV1WhitelistRegexWithBodyWithResponse request with any body
	PostApiV1WhitelistRegexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1WhitelistRegexResponse, error)

	PostApiV1WhitelistRegexWithResponse(ctx context.Context, body PostApiV1WhitelistRegexJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1WhitelistRegexResponse, error)

	// DeleteApiV1WhitelistRegexIdWithResponse request
	DeleteApiV1WhitelistRegexIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiV1WhitelistRegexIdResponse, error)

	// PutApiV1WhitelistRegexIdWithBodyWithResponse request with any body
	PutApiV1WhitelistRegexIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1WhitelistRegexIdResponse, error)

	PutApiV1WhitelistRegexIdWithResponse(ctx context.Context, id int, body PutApiV1WhitelistRegexIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1WhitelistRegexIdResponse, error)
}

type GetApiV1BlacklistRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RegexFilter
}

// Status returns HTTPResponse.Status
func (r GetApiV1BlacklistRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1BlacklistRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1BlacklistRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegexFilter
}

// Status returns HTTPResponse.Status
func (r PostApiV1BlacklistRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1BlacklistRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1BlacklistRegexIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1BlacklistRegexIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1BlacklistRegexIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1BlacklistRegexIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegexFilter
}

// Status returns HTTPResponse.Status
func (r PutApiV1BlacklistRegexIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1BlacklistRegexIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ChangeRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ChangeRequestSessionsResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChangeRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChangeRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1HealthcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HealthcheckSessionsResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1HealthcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1HealthcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IexpressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetApiV1IexpressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IexpressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IexpressRequestIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetIExpressHostsAndSessionDetailsResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1IexpressRequestIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IexpressRequestIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PtyTokenJoinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1PtyTokenJoinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PtyTokenJoinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PtyTokenStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1PtyTokenStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PtyTokenStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WhitelistRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RegexFilter
}

// Status returns HTTPResponse.Status
func (r GetApiV1WhitelistRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WhitelistRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1WhitelistRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegexFilter
}

// Status returns HTTPResponse.Status
func (r PostApiV1WhitelistRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1WhitelistRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1WhitelistRegexIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1WhitelistRegexIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1WhitelistRegexIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1WhitelistRegexIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegexFilter
}

// Status returns HTTPResponse.Status
func (r PutApiV1WhitelistRegexIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1WhitelistRegexIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1BlacklistRegexWithResponse request returning *GetApiV1BlacklistRegexResponse
func (c *ClientWithResponses) GetApiV1BlacklistRegexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1BlacklistRegexResponse, error) {
	rsp, err := c.GetApiV1BlacklistRegex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1BlacklistRegexResponse(rsp)
}

// PostApiV1BlacklistRegexWithBodyWithResponse request with arbitrary body returning *PostApiV1BlacklistRegexResponse
func (c *ClientWithResponses) PostApiV1BlacklistRegexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1BlacklistRegexResponse, error) {
	rsp, err := c.PostApiV1BlacklistRegexWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1BlacklistRegexResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1BlacklistRegexWithResponse(ctx context.Context, body PostApiV1BlacklistRegexJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1BlacklistRegexResponse, error) {
	rsp, err := c.PostApiV1BlacklistRegex(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1BlacklistRegexResponse(rsp)
}

// DeleteApiV1BlacklistRegexIdWithResponse request returning *DeleteApiV1BlacklistRegexIdResponse
func (c *ClientWithResponses) DeleteApiV1BlacklistRegexIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiV1BlacklistRegexIdResponse, error) {
	rsp, err := c.DeleteApiV1BlacklistRegexId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1BlacklistRegexIdResponse(rsp)
}

// PutApiV1BlacklistRegexIdWithBodyWithResponse request with arbitrary body returning *PutApiV1BlacklistRegexIdResponse
func (c *ClientWithResponses) PutApiV1BlacklistRegexIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1BlacklistRegexIdResponse, error) {
	rsp, err := c.PutApiV1BlacklistRegexIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1BlacklistRegexIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1BlacklistRegexIdWithResponse(ctx context.Context, id int, body PutApiV1BlacklistRegexIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1BlacklistRegexIdResponse, error) {
	rsp, err := c.PutApiV1BlacklistRegexId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1BlacklistRegexIdResponse(rsp)
}

// GetApiV1ChangeRequestsWithResponse request returning *GetApiV1ChangeRequestsResponse
func (c *ClientWithResponses) GetApiV1ChangeRequestsWithResponse(ctx context.Context, params *GetApiV1ChangeRequestsParams, reqEditors ...RequestEditorFn) (*GetApiV1ChangeRequestsResponse, error) {
	rsp, err := c.GetApiV1ChangeRequests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChangeRequestsResponse(rsp)
}

// GetApiV1HealthcheckWithResponse request returning *GetApiV1HealthcheckResponse
func (c *ClientWithResponses) GetApiV1HealthcheckWithResponse(ctx context.Context, params *GetApiV1HealthcheckParams, reqEditors ...RequestEditorFn) (*GetApiV1HealthcheckResponse, error) {
	rsp, err := c.GetApiV1Healthcheck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1HealthcheckResponse(rsp)
}

// GetApiV1IexpressWithResponse request returning *GetApiV1IexpressResponse
func (c *ClientWithResponses) GetApiV1IexpressWithResponse(ctx context.Context, params *GetApiV1IexpressParams, reqEditors ...RequestEditorFn) (*GetApiV1IexpressResponse, error) {
	rsp, err := c.GetApiV1Iexpress(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IexpressResponse(rsp)
}

// GetApiV1IexpressRequestIdWithResponse request returning *GetApiV1IexpressRequestIdResponse
func (c *ClientWithResponses) GetApiV1IexpressRequestIdWithResponse(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*GetApiV1IexpressRequestIdResponse, error) {
	rsp, err := c.GetApiV1IexpressRequestId(ctx, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IexpressRequestIdResponse(rsp)
}

// PostApiV1PtyTokenJoinWithBodyWithResponse request with arbitrary body returning *PostApiV1PtyTokenJoinResponse
func (c *ClientWithResponses) PostApiV1PtyTokenJoinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenJoinResponse, error) {
	rsp, err := c.PostApiV1PtyTokenJoinWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PtyTokenJoinResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PtyTokenJoinWithResponse(ctx context.Context, body PostApiV1PtyTokenJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenJoinResponse, error) {
	rsp, err := c.PostApiV1PtyTokenJoin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PtyTokenJoinResponse(rsp)
}

// PostApiV1PtyTokenStartWithBodyWithResponse request with arbitrary body returning *PostApiV1PtyTokenStartResponse
func (c *ClientWithResponses) PostApiV1PtyTokenStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenStartResponse, error) {
	rsp, err := c.PostApiV1PtyTokenStartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PtyTokenStartResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PtyTokenStartWithResponse(ctx context.Context, body PostApiV1PtyTokenStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenStartResponse, error) {
	rsp, err := c.PostApiV1PtyTokenStart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PtyTokenStartResponse(rsp)
}

// GetApiV1WhitelistRegexWithResponse request returning *GetApiV1WhitelistRegexResponse
func (c *ClientWithResponses) GetApiV1WhitelistRegexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1WhitelistRegexResponse, error) {
	rsp, err := c.GetApiV1WhitelistRegex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WhitelistRegexResponse(rsp)
}

// PostApiV1WhitelistRegexWithBodyWithResponse request with arbitrary body returning *PostApiV1WhitelistRegexResponse
func (c *ClientWithResponses) PostApiV1WhitelistRegexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1WhitelistRegexResponse, error) {
	rsp, err := c.PostApiV1WhitelistRegexWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1WhitelistRegexResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1WhitelistRegexWithResponse(ctx context.Context, body PostApiV1WhitelistRegexJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1WhitelistRegexResponse, error) {
	rsp, err := c.PostApiV1WhitelistRegex(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1WhitelistRegexResponse(rsp)
}

// DeleteApiV1WhitelistRegexIdWithResponse request returning *DeleteApiV1WhitelistRegexIdResponse
func (c *ClientWithResponses) DeleteApiV1WhitelistRegexIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiV1WhitelistRegexIdResponse, error) {
	rsp, err := c.DeleteApiV1WhitelistRegexId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1WhitelistRegexIdResponse(rsp)
}

// PutApiV1WhitelistRegexIdWithBodyWithResponse request with arbitrary body returning *PutApiV1WhitelistRegexIdResponse
func (c *ClientWithResponses) PutApiV1WhitelistRegexIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1WhitelistRegexIdResponse, error) {
	rsp, err := c.PutApiV1WhitelistRegexIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1WhitelistRegexIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1WhitelistRegexIdWithResponse(ctx context.Context, id int, body PutApiV1WhitelistRegexIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1WhitelistRegexIdResponse, error) {
	rsp, err := c.PutApiV1WhitelistRegexId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1WhitelistRegexIdResponse(rsp)
}

// ParseGetApiV1BlacklistRegexResponse parses an HTTP response from a GetApiV1BlacklistRegexWithResponse call
func ParseGetApiV1BlacklistRegexResponse(rsp *http.Response) (*GetApiV1BlacklistRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1BlacklistRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RegexFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1BlacklistRegexResponse parses an HTTP response from a PostApiV1BlacklistRegexWithResponse call
func ParsePostApiV1BlacklistRegexResponse(rsp *http.Response) (*PostApiV1BlacklistRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1BlacklistRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegexFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1BlacklistRegexIdResponse parses an HTTP response from a DeleteApiV1BlacklistRegexIdWithResponse call
func ParseDeleteApiV1BlacklistRegexIdResponse(rsp *http.Response) (*DeleteApiV1BlacklistRegexIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1BlacklistRegexIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV1BlacklistRegexIdResponse parses an HTTP response from a PutApiV1BlacklistRegexIdWithResponse call
func ParsePutApiV1BlacklistRegexIdResponse(rsp *http.Response) (*PutApiV1BlacklistRegexIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1BlacklistRegexIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegexFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ChangeRequestsResponse parses an HTTP response from a GetApiV1ChangeRequestsWithResponse call
func ParseGetApiV1ChangeRequestsResponse(rsp *http.Response) (*GetApiV1ChangeRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChangeRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ChangeRequestSessionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1HealthcheckResponse parses an HTTP response from a GetApiV1HealthcheckWithResponse call
func ParseGetApiV1HealthcheckResponse(rsp *http.Response) (*GetApiV1HealthcheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1HealthcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HealthcheckSessionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1IexpressResponse parses an HTTP response from a GetApiV1IexpressWithResponse call
func ParseGetApiV1IexpressResponse(rsp *http.Response) (*GetApiV1IexpressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IexpressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1IexpressRequestIdResponse parses an HTTP response from a GetApiV1IexpressRequestIdWithResponse call
func ParseGetApiV1IexpressRequestIdResponse(rsp *http.Response) (*GetApiV1IexpressRequestIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IexpressRequestIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetIExpressHostsAndSessionDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PtyTokenJoinResponse parses an HTTP response from a PostApiV1PtyTokenJoinWithResponse call
func ParsePostApiV1PtyTokenJoinResponse(rsp *http.Response) (*PostApiV1PtyTokenJoinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PtyTokenJoinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PtyTokenStartResponse parses an HTTP response from a PostApiV1PtyTokenStartWithResponse call
func ParsePostApiV1PtyTokenStartResponse(rsp *http.Response) (*PostApiV1PtyTokenStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PtyTokenStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1WhitelistRegexResponse parses an HTTP response from a GetApiV1WhitelistRegexWithResponse call
func ParseGetApiV1WhitelistRegexResponse(rsp *http.Response) (*GetApiV1WhitelistRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WhitelistRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RegexFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1WhitelistRegexResponse parses an HTTP response from a PostApiV1WhitelistRegexWithResponse call
func ParsePostApiV1WhitelistRegexResponse(rsp *http.Response) (*PostApiV1WhitelistRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1WhitelistRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegexFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1WhitelistRegexIdResponse parses an HTTP response from a DeleteApiV1WhitelistRegexIdWithResponse call
func ParseDeleteApiV1WhitelistRegexIdResponse(rsp *http.Response) (*DeleteApiV1WhitelistRegexIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1WhitelistRegexIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV1WhitelistRegexIdResponse parses an HTTP response from a PutApiV1WhitelistRegexIdWithResponse call
func ParsePutApiV1WhitelistRegexIdResponse(rsp *http.Response) (*PutApiV1WhitelistRegexIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1WhitelistRegexIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegexFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all blacklist regex filters for healthcheck ou group
	// (GET /api/v1/blacklist/regex)
	GetApiV1BlacklistRegex(c *gin.Context)
	// Add a regex to blacklist for healthcheck ou group
	// (POST /api/v1/blacklist/regex)
	PostApiV1BlacklistRegex(c *gin.Context)
	// Soft delete a blacklist regex filter
	// (DELETE /api/v1/blacklist/regex/{id})
	DeleteApiV1BlacklistRegexId(c *gin.Context, id int)
	// Update a blacklist regex filter
	// (PUT /api/v1/blacklist/regex/{id})
	PutApiV1BlacklistRegexId(c *gin.Context, id int)
	// Get change request and associated PTY sessions
	// (GET /api/v1/change_requests/)
	GetApiV1ChangeRequests(c *gin.Context, params GetApiV1ChangeRequestsParams)
	// Get healthcheck servers for user's OU group and associated PTY sessions
	// (GET /api/v1/healthcheck/)
	GetApiV1Healthcheck(c *gin.Context, params GetApiV1HealthcheckParams)
	// Get Approved IExpress tickets and associated PTY sessions
	// (GET /api/v1/iexpress/)
	GetApiV1Iexpress(c *gin.Context, params GetApiV1IexpressParams)
	// Get details of a specific IExpress ticket
	// (GET /api/v1/iexpress/{request_id})
	GetApiV1IexpressRequestId(c *gin.Context, requestId string)
	// Mint a join token for an existing PTY session
	// (POST /api/v1/pty_token/join)
	PostApiV1PtyTokenJoin(c *gin.Context)
	// Mint a start token for a new PTY session
	// (POST /api/v1/pty_token/start)
	PostApiV1PtyTokenStart(c *gin.Context)
	// Get all whitelist regex filters for healthcheck ou group
	// (GET /api/v1/whitelist/regex)
	GetApiV1WhitelistRegex(c *gin.Context)
	// Add a regex to whitelist for healthcheck ou group
	// (POST /api/v1/whitelist/regex)
	PostApiV1WhitelistRegex(c *gin.Context)
	// Soft delete a whitelist regex filter
	// (DELETE /api/v1/whitelist/regex/{id})
	DeleteApiV1WhitelistRegexId(c *gin.Context, id int)
	// Update a whitelist regex filter
	// (PUT /api/v1/whitelist/regex/{id})
	PutApiV1WhitelistRegexId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1BlacklistRegex operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1BlacklistRegex(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1BlacklistRegex(c)
}

// PostApiV1BlacklistRegex operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1BlacklistRegex(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1BlacklistRegex(c)
}

// DeleteApiV1BlacklistRegexId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1BlacklistRegexId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiV1BlacklistRegexId(c, id)
}

// PutApiV1BlacklistRegexId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1BlacklistRegexId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiV1BlacklistRegexId(c, id)
}

// GetApiV1ChangeRequests operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ChangeRequests(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1ChangeRequestsParams

	// ------------- Optional query parameter "ticket_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ticket_ids", c.Request.URL.Query(), &params.TicketIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticket_ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "implementor_groups" -------------

	err = runtime.BindQueryParameter("form", true, false, "implementor_groups", c.Request.URL.Query(), &params.ImplementorGroups)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter implementor_groups: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lob" -------------

	err = runtime.BindQueryParameter("form", true, false, "lob", c.Request.URL.Query(), &params.Lob)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lob: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "country" -------------

	err = runtime.BindQueryParameter("form", true, false, "country", c.Request.URL.Query(), &params.Country)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pty_session_state" -------------

	err = runtime.BindQueryParameter("form", true, false, "pty_session_state", c.Request.URL.Query(), &params.PtySessionState)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pty_session_state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "total_count" -------------

	err = runtime.BindQueryParameter("form", true, false, "total_count", c.Request.URL.Query(), &params.TotalCount)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter total_count: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1ChangeRequests(c, params)
}

// GetApiV1Healthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Healthcheck(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1HealthcheckParams

	// ------------- Optional query parameter "hostname" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostname", c.Request.URL.Query(), &params.Hostname)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostname: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ip" -------------

	err = runtime.BindQueryParameter("form", true, false, "ip", c.Request.URL.Query(), &params.Ip)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ip: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "appcode" -------------

	err = runtime.BindQueryParameter("form", true, false, "appcode", c.Request.URL.Query(), &params.Appcode)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appcode: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lob" -------------

	err = runtime.BindQueryParameter("form", true, false, "lob", c.Request.URL.Query(), &params.Lob)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lob: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "os_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "os_type", c.Request.URL.Query(), &params.OsType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter os_type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "environment" -------------

	err = runtime.BindQueryParameter("form", true, false, "environment", c.Request.URL.Query(), &params.Environment)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "country" -------------

	err = runtime.BindQueryParameter("form", true, false, "country", c.Request.URL.Query(), &params.Country)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "system_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "system_type", c.Request.URL.Query(), &params.SystemType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter system_type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pty_session_state" -------------

	err = runtime.BindQueryParameter("form", true, false, "pty_session_state", c.Request.URL.Query(), &params.PtySessionState)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pty_session_state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1Healthcheck(c, params)
}

// GetApiV1Iexpress operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Iexpress(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1IexpressParams

	// ------------- Optional query parameter "request_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "request_ids", c.Request.URL.Query(), &params.RequestIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter request_ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "requestor" -------------

	err = runtime.BindQueryParameter("form", true, false, "requestor", c.Request.URL.Query(), &params.Requestor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter requestor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lob" -------------

	err = runtime.BindQueryParameter("form", true, false, "lob", c.Request.URL.Query(), &params.Lob)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lob: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "origin_country" -------------

	err = runtime.BindQueryParameter("form", true, false, "origin_country", c.Request.URL.Query(), &params.OriginCountry)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter origin_country: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "app_impacted" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_impacted", c.Request.URL.Query(), &params.AppImpacted)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter app_impacted: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "total_count" -------------

	err = runtime.BindQueryParameter("form", true, false, "total_count", c.Request.URL.Query(), &params.TotalCount)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter total_count: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1Iexpress(c, params)
}

// GetApiV1IexpressRequestId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1IexpressRequestId(c *gin.Context) {

	var err error

	// ------------- Path parameter "request_id" -------------
	var requestId string

	err = runtime.BindStyledParameterWithOptions("simple", "request_id", c.Param("request_id"), &requestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter request_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1IexpressRequestId(c, requestId)
}

// PostApiV1PtyTokenJoin operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1PtyTokenJoin(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1PtyTokenJoin(c)
}

// PostApiV1PtyTokenStart operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1PtyTokenStart(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1PtyTokenStart(c)
}

// GetApiV1WhitelistRegex operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1WhitelistRegex(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1WhitelistRegex(c)
}

// PostApiV1WhitelistRegex operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1WhitelistRegex(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1WhitelistRegex(c)
}

// DeleteApiV1WhitelistRegexId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1WhitelistRegexId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiV1WhitelistRegexId(c, id)
}

// PutApiV1WhitelistRegexId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1WhitelistRegexId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiV1WhitelistRegexId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/blacklist/regex", wrapper.GetApiV1BlacklistRegex)
	router.POST(options.BaseURL+"/api/v1/blacklist/regex", wrapper.PostApiV1BlacklistRegex)
	router.DELETE(options.BaseURL+"/api/v1/blacklist/regex/:id", wrapper.DeleteApiV1BlacklistRegexId)
	router.PUT(options.BaseURL+"/api/v1/blacklist/regex/:id", wrapper.PutApiV1BlacklistRegexId)
	router.GET(options.BaseURL+"/api/v1/change_requests/", wrapper.GetApiV1ChangeRequests)
	router.GET(options.BaseURL+"/api/v1/healthcheck/", wrapper.GetApiV1Healthcheck)
	router.GET(options.BaseURL+"/api/v1/iexpress/", wrapper.GetApiV1Iexpress)
	router.GET(options.BaseURL+"/api/v1/iexpress/:request_id", wrapper.GetApiV1IexpressRequestId)
	router.POST(options.BaseURL+"/api/v1/pty_token/join", wrapper.PostApiV1PtyTokenJoin)
	router.POST(options.BaseURL+"/api/v1/pty_token/start", wrapper.PostApiV1PtyTokenStart)
	router.GET(options.BaseURL+"/api/v1/whitelist/regex", wrapper.GetApiV1WhitelistRegex)
	router.POST(options.BaseURL+"/api/v1/whitelist/regex", wrapper.PostApiV1WhitelistRegex)
	router.DELETE(options.BaseURL+"/api/v1/whitelist/regex/:id", wrapper.DeleteApiV1WhitelistRegexId)
	router.PUT(options.BaseURL+"/api/v1/whitelist/regex/:id", wrapper.PutApiV1WhitelistRegexId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcbXPbtrL+KxjcO9NmhpIoyU5sfXOcNHFOcuOxnfZ0XI8KkSsJNUWwAOhYzei/3wHA",
	"F5AEZcp23N57PPkQm8TLYvfB7oPF0t9wwFYJiyGWAk++YREsYUX0j8dLEi/gDP5MQchzEIKyWJyBSFgs",
	"QDVIOEuASwq6eaCbTyEOp5KudIM54ysi8QSHREJPP/WwXCeAJ1hITuMF3nh5RxqqLm1vuRFjKiSRqdjW",
	"UkjC5a4isDSWfK06UAkr9/jZA8I5Wavfl0zJY/QyDUESGonKCP/NYY4n+L8GpYoHmX4H71mh0zem688j",
	"1yR0lUSwglgyPl1wliZiNyEjNnO2E+lqRcyKa+/KQdjsDwikan3M4hgCSVnctHuL3f5gNN7RChGQG9ix",
	"TyLXhQ1aJDGA4CyCu4xyrlqeqYamW4a0bV1KzZyb9hsPpwK4W5jtuj1NecLM1gpBBJwmRuP4Yp0AYnMU",
	"FE3RDGi8QCAkmUVULCHEHoY4XeHJZW3LYA8vgURyOQ2WEFzjK4cWG6toiGCeKyHkEixBrGlJIOmNMlIQ",
	"MQGhc6J3IE/e3iYchFA7QBzFYXUXtPuXJ9huLvNYErfLVsjQSZh8PNd+TcgCLODQWMICeP5mKuhfLa8l",
	"kySaakfWtJ5+ieJ0NQOubEjBSIAyjAi0IjJYKkgp885pJIGX262YxqWg9xpcGlt3B4lHNmI3E6p+TVFI",
	"kkwDFoI7lpQBofEO4hvKWaycsvM9TaYkDLWBXa9jsgK3a1DGoBxCtZl0q8pY1Ym9Uv6rliXXVOW0RReV",
	"q/GYmCqvtmPwsZxzdyufynUm+XkWozobubHDmyRlPQNO+PXUdBS7R/z/Pxor3FBzaxShviGwQh1dJSSQ",
	"EO62NJIknN1ARmOGbaNbbUYt229XgtnGgVbhtDqhsxXjdEHj6TaPwCEiEpRYwTXIliaGv7ZwlOw141sY",
	"zG6LVvSlg5+x5LKlyPsb5TWUUMNBRULLQi7P9IHRODtTKOngliiGqzFYo3L49OLXkT/aH47Gwz1c5XE2",
	"L9b7poLfJimshsOTNzmRgVsqpAp7pxe/oqwLkgwp9uohtYHRVxpFaAbohkRUaTxEZEFoLCSSSyryTj8I",
	"RGMqKYlslpZHOO+RWGnNeLV1VgZ16b50FK3Ht+3qMo1y1oCIECygWidfqVwahVia9BCdI5IkEQ3ILGo5",
	"eeXKcpDOj1TIKu8Vyjj1aX4QKKJzQBn8OvlM60Tj8FUBB72hZ+tHckEt2z4iQk41b6ZyvcOhpzwodFtj",
	"frJ4qC/pGIV0c2fMqTdynjMgh5tlY/t4Y4yjnFCHE0czOKoAF0Wf53hy2XVFeONt3S+PEaTuB4XdzVnz",
	"IdpvWHgvPX+OsuombfqVq42Hz2ABtz+ZY0PTtWSjE7lDRmb7Dgwhgl2HzPu0DGkOPVPz/FuBtl/en1y8",
	"/XhyfoE9/Prj0fG/9M9Xd+1x62RGxRRi5f/s9zPGIiDa+bB0C/tIiJTA3VwsTcKd9Zr3mXVN/ZwDvwF+",
	"Es+ZIzDEc4bIjKVSb1dJ+AIkEroHmjPu2MRVZGQk2ZHxWAL6LEwAliwPAIi4Q6mecEoTh4SnKDs/5T6l",
	"IuSduyMX0J7EFVlNjHbSGstR4OMzm9AUbryZscnEs1WEIRj1GsJM8NDvq39DLXvnmP45jtYoX6kK05kw",
	"iAr0W02e37CHWjmAZR3JHj1YFWrYSpBKiDYYUuHDsqHajZcxsUY44hIpQqXxrGihzrs5aKOwQpTNTj3M",
	"Zo3JS/VcsGuI7YSJzYg5u11/4RGe4KWUiZgMBvpRn4l+wFZK26q3wsb6w3L2LqCfHWS4GKRBrxgJ0YxE",
	"JA6Aoy9nH/UadXukPRL6EfqLvod+d83+e+N5ONPPX7hQkAlaF+HDLxdIvyqnvnNPmqG8cmFNm2roBCmn",
	"cn2uQGI08RoIB36UyqX6baZ/+yn3mh9+UR5eQ0r7Z/22lEWtFG/UwNTpCo9OT/QSdDxWyCBxWMDFRkkf",
	"HaecQyyjNSKRYGjJDJRIFKGYxT2j/+xIiSAOE0ZjKfpKFir14eeYxZKzCB2dnmAP3wA3lB4PlSfQISWB",
	"mCQUT/C47/fHWMeRpVbCgCR0cDMczCISXEdUyAFXsVu9WpizqwIPUcs6US7rHcijhP48fJ2316FeHxYN",
	"ZvWoI9/XDofFMkuLZbRfjTP4Q5gTh9mwnfMaNqloZjR0RHedFoqVIb2yLJupc4X7Rsx6FFMRlkR54ALO",
	"Ga9gSDNFGz2XV5sr6w5FKUnbr2VqjYxlmSdFLDUbTNmULITmGUsqQXcdoELXWHGrJMs6Ve1yykSrYbRn",
	"fs3C9U42qbmNkng0QzOHRRoRjrI0sjrq5u3v2r15O8emrbSUPIVNA2XDnVbUGVxNMJk3KKOhSKRBAELM",
	"0yjSB8Q9N5B0jgDROEll7jtXJFLMDEIDiRffE4ZHYYhIBj3JLDQ+AH8br81lDL7RcGPWoYh1E6Jv9HMH",
	"SE9C7ZE4WYHemWpdVOlAeSmcp8hxkZMqEeFZ1m1cTlw14LLXVHNm2Oww4DBse5+YKU2mcfg9bXjO5jKT",
	"DpEWh9LNbaQur5HKJ7bHY/giKt5uO0C1uqov5rDz97kr/4ndVXa6u4e7+kdg39jrIbC3vFX1DCMGFsOp",
	"Cn4GMuWx0AH86PT07PPPb98gU/yCzvL70WaqE/Tp9AeBLLKf0WbF/awONv3T7+x85kmjNxWIg+QUbiBE",
	"c85WlclCxZJvaAghmq31G5LKJcQyw5Wh04otunlcpapHtOz7P1PQWf5s45t7jSkNBfZcJO6Ou5+N5x7W",
	"UdvymMObm4uGfyo3urtbecextWsVQ29vEwiUrU0WBvXQ2U/H4/H4EHvOSSr3JeU83fJ3D528SE4+fOo3",
	"DITxDcZNsFSi4zPhoTmFKMy8BkfmJtQtjX2Jkaceu/lER8bZbVJdVGGPGsKcpJHEk6GHVzSmK3VsH7rq",
	"HdoHNLUYzlFHvodX5DYb1vf9+81il3Q455mTSIDXiIgOItQlEDVzVmUWG4/80X7Pf9Ub+Wg0nvj+xPex",
	"58ht+a9GQ98f4tbCPXxUJO2b9Xpt0+R3r5f4/B328Pt/qXjsriW5LAsbygoP/OHLp9NaBcVEkYywWmOR",
	"ZdOG/aFfmoEkSc/EtN6werN/aefkaHyjs+PVK/zLb9uVZF9/XZpiOnwNdHA43juAl0HYG82GYW/vcDbq",
	"HRJ41fPH5CUZvTqcBa/U9raq7ErdDdFoNNnbn/gH/fFoH1cL6+rNXk72DvrjA50jqF/ADvdHL8fB7GVv",
	"tHcw7u2NXx72DmfBrHdwOH+5N/PHsD/3h6/2x0P/cOgfbLuiLcvpykubokxOLRgr0NpJf/3QvkgpBR8h",
	"31frG4764wOlxfsJW7tx2TL+tkStE722BXLFSCgXv9HEx1XbeYnfnJ+fY0//13vzWiFK1y/g47fqccz0",
	"OFQK5WvD7CLMplALTkJ9gzYjwTXEIRJroSPpxts1AbO9AriRadypBK2aRt69AG17GqiWpM68gyZfcgmU",
	"t9GzVhr8P0/Bf99BQ/ItVNKiw5/INWSUtUqCrUP/3QTYzhCYRWzlvZ+/WHR3q1YbpLfo+n25rlWa2I3o",
	"qsiRVd7tzBtpcp9eJEl0iLpH13vyWybMHec9umY+/B49q6WL34uTO2XW3q/Tku+mtgofFXK7AhI/U9wO",
	"FPfqgbkRi5zuwvuOXh/b/NHQxyoLPOUsTPNa9goX3N/rj/b3+8O9vf5ouG95idKtlMSwlReScEXjogi/",
	"qMFv0sRnKvh/igouK8Hl3jxQl890K3/fUmjflRfZIV5tl12Y0a5MxkUnck9Zpw93Uxw7llcoTv4tw44J",
	"vrz6GV3o5JYo6lXasnoC/UhduTplKcIhNJWJgPKS4ryXWt4qrD1GNDbVKHryF60M5iRbXDf6UhbzPm4m",
	"rVIX/FQ0pV5xfB9qVSlRvpc6/lPTfM9ptIdzlk5e3fV92abNfRffbYXl909/73H1yLi1sPSnMvOn3dx6",
	"8RGK26d/K13a5s4SldxZZgmLjreajS8gtt5uFnvk6jte9nX/StIBlJohighfnrM73XnXh4mfClG5vGyO",
	"CBIJBHROgzq87kSQIrA6OzBQvFhfKW8vozmVa12K94Fptn7fi+ttZrU/fXni6+NqlaEDNcoejNO/rLyK",
	"3sGmGi1qVApWyz4ViP797/Yr5jxfqqDjand+b8R8orFERFfaWYWEJHaWaFqoUU+1Utpgo0P3DrjRlaLf",
	"CTiV6uJn5DwqcrSdbeigGL7uBpqveTFCx1LKonjhH19KWazs6UspW6b+rqWUDsM8l1I+l1JKZqHxcUop",
	"ay5jl1LKKkifSym7llK6HcrDSymfzh7PpZTPpZQ7l1LeG/ab4vsrg+IaHo4usIfTyrdJt/5QrG4lJ0PS",
	"F0k/JbIfzkQ/YDyZ7O/7/ivcTGp9ZAGJKiNNBoNIPVwyIfNuV4W49f6KLmjyJrp9flNuwZLMNaU6y87K",
	"9TJQL8uR63vArWWeP1qZ7kba2ENB8Q1QecMI4YtSOvtGf4t89axLZwHLmay/RtQ6jbMyoOPqP39B7zou",
	"2s7xN6X5RGKygBLQRoSiVNgAwBqimLmcwI31LQvP/yRExBZm/G1lDeU8WbYGfWQLl16PwhWNqZAqmtxA",
	"+Y2XnmGlllmHbftUeiy8udr8bwAAAP//fVieUspPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
