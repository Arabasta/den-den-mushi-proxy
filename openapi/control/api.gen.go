// Package control_oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package control_oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ConnectionPurpose.
const (
	ChangeRequest ConnectionPurpose = "change_request"
	HealthCheck   ConnectionPurpose = "health_check"
)

// Defines values for ConnectionStatus.
const (
	ConnectionStatusActive ConnectionStatus = "active"
	ConnectionStatusClosed ConnectionStatus = "closed"
)

// Defines values for PtySessionState.
const (
	PtySessionStateActive  PtySessionState = "active"
	PtySessionStateClosed  PtySessionState = "closed"
	PtySessionStateCreated PtySessionState = "created"
)

// Defines values for StartRole.
const (
	Implementor StartRole = "implementor"
	Observer    StartRole = "observer"
)

// ChangeRequestSessionsResponse defines model for ChangeRequestSessionsResponse.
type ChangeRequestSessionsResponse struct {
	ChangeEndTime       *time.Time            `json:"change_end_time,omitempty"`
	ChangeId            *string               `json:"change_id,omitempty"`
	ChangeRequestStatus *string               `json:"change_request_status,omitempty"`
	ChangeStartTime     *time.Time            `json:"change_start_time,omitempty"`
	Country             *string               `json:"country,omitempty"`
	HostSessionDetails  *[]HostSessionDetails `json:"host_session_details,omitempty"`
	ImplementorGroups   *[]string             `json:"implementor_groups,omitempty"`
	Lob                 *string               `json:"lob,omitempty"`
	Summary             *string               `json:"summary,omitempty"`
}

// Connection defines model for Connection.
type Connection struct {
	Id           *string    `json:"id,omitempty"`
	JoinTime     *time.Time `json:"join_time,omitempty"`
	LeaveTime    *time.Time `json:"leave_time,omitempty"`
	PtySessionId *string    `json:"pty_session_id,omitempty"`

	// StartRole Start role for joining existing PTY sessions
	StartRole *StartRole `json:"start_role,omitempty"`

	// Status Status of the connection
	Status *ConnectionStatus `json:"status,omitempty"`
	UserId *string           `json:"user_id,omitempty"`
}

// ConnectionPurpose Type of connection being established
type ConnectionPurpose string

// ConnectionStatus Status of the connection
type ConnectionStatus string

// Host defines model for Host.
type Host struct {
	AppCode     *string `json:"app_code,omitempty"`
	Environment *string `json:"environment,omitempty"`
	IpAddress   *string `json:"ip_address,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// HostSessionDetails defines model for HostSessionDetails.
type HostSessionDetails struct {
	Host *struct {
		AppCode     string `json:"app_code"`
		Environment string `json:"environment"`
		IpAddress   string `json:"ip_address"`
		Name        string `json:"name"`
	} `json:"host,omitempty"`
	OsUsers     *[]string            `json:"os_users,omitempty"`
	PtySessions *[]PtySessionSummary `json:"pty_sessions,omitempty"`
}

// JoinRequest defines model for JoinRequest.
type JoinRequest struct {
	// PtySessionId ID of the existing PTY session to join, user will be validated against this session's initial connection details
	PtySessionId string `json:"pty_session_id"`

	// StartRole Start role for joining existing PTY sessions
	StartRole StartRole `json:"start_role"`
}

// PtySession defines model for PtySession.
type PtySession struct {
	// ChangeId ID of the change request associated with this PTY session, if applicable
	ChangeId *string `json:"change_id,omitempty"`

	// Connections List of connections to this PTY session's life time
	Connections  *[]Connection `json:"connections,omitempty"`
	CreatedBy    *string       `json:"created_by,omitempty"`
	EndTime      *time.Time    `json:"end_time,omitempty"`
	Id           *string       `json:"id,omitempty"`
	LastActivity *time.Time    `json:"last_activity,omitempty"`

	// Purpose Type of connection being established
	Purpose   *ConnectionPurpose `json:"purpose,omitempty"`
	StartTime *time.Time         `json:"start_time,omitempty"`

	// State State of the PTY session
	State *PtySessionState `json:"state,omitempty"`
}

// PtySessionState State of the PTY session
type PtySessionState string

// PtySessionSummary defines model for PtySessionSummary.
type PtySessionSummary struct {
	ChangeId *string `json:"change_id,omitempty"`

	// Connections List of connections to this PTY session's life time
	Connections  []Connection `json:"connections"`
	CreatedBy    string       `json:"created_by"`
	EndTime      *time.Time   `json:"end_time,omitempty"`
	Id           string       `json:"id"`
	LastActivity *time.Time   `json:"last_activity,omitempty"`

	// Purpose Type of connection being established
	Purpose   ConnectionPurpose `json:"purpose"`
	StartTime *time.Time        `json:"start_time,omitempty"`

	// State State of the PTY session
	State PtySessionState `json:"state"`
}

// ServerInfo Info about the target server for the PTY session
type ServerInfo struct {
	// OsUser The Os user to connect as
	OsUser string `json:"os_user"`

	// ServerIp IP address of the target server
	ServerIp string `json:"server_ip"`
}

// StartRequest defines model for StartRequest.
type StartRequest struct {
	// ChangeId Only required if purpose is "change_request", ID of the change request to connect to
	ChangeId *string `json:"change_id,omitempty"`

	// Purpose Type of connection being established
	Purpose ConnectionPurpose `json:"purpose"`

	// Server Info about the target server for the PTY session
	Server ServerInfo `json:"server"`
}

// StartRole Start role for joining existing PTY sessions
type StartRole string

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// ProxyUrl Load balancer URL for proxy group (e.g., `https://proxy.os.com`, `https://proxy.db.com`)
	ProxyUrl string `json:"proxyUrl"`

	// Token JWT token for proxy
	Token string `json:"token"`
}

// GetApiV1ChangeRequestsParams defines parameters for GetApiV1ChangeRequests.
type GetApiV1ChangeRequestsParams struct {
	TicketIds         *[]string        `form:"ticket_ids,omitempty" json:"ticket_ids,omitempty"`
	ImplementorGroups *[]string        `form:"implementor_groups,omitempty" json:"implementor_groups,omitempty"`
	Lob               *string          `form:"lob,omitempty" json:"lob,omitempty"`
	Country           *string          `form:"country,omitempty" json:"country,omitempty"`
	StartTime         *time.Time       `form:"start_time,omitempty" json:"start_time,omitempty"`
	EndTime           *time.Time       `form:"end_time,omitempty" json:"end_time,omitempty"`
	PtySessionState   *PtySessionState `form:"pty_session_state,omitempty" json:"pty_session_state,omitempty"`
	Page              *int             `form:"page,omitempty" json:"page,omitempty"`
	PageSize          *int             `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// PostApiV1PtyTokenJoinJSONRequestBody defines body for PostApiV1PtyTokenJoin for application/json ContentType.
type PostApiV1PtyTokenJoinJSONRequestBody = JoinRequest

// PostApiV1PtyTokenStartJSONRequestBody defines body for PostApiV1PtyTokenStart for application/json ContentType.
type PostApiV1PtyTokenStartJSONRequestBody = StartRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1ChangeRequests request
	GetApiV1ChangeRequests(ctx context.Context, params *GetApiV1ChangeRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PtyTokenJoinWithBody request with any body
	PostApiV1PtyTokenJoinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PtyTokenJoin(ctx context.Context, body PostApiV1PtyTokenJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PtyTokenStartWithBody request with any body
	PostApiV1PtyTokenStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PtyTokenStart(ctx context.Context, body PostApiV1PtyTokenStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1ChangeRequests(ctx context.Context, params *GetApiV1ChangeRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ChangeRequestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PtyTokenJoinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PtyTokenJoinRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PtyTokenJoin(ctx context.Context, body PostApiV1PtyTokenJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PtyTokenJoinRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PtyTokenStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PtyTokenStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PtyTokenStart(ctx context.Context, body PostApiV1PtyTokenStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PtyTokenStartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1ChangeRequestsRequest generates requests for GetApiV1ChangeRequests
func NewGetApiV1ChangeRequestsRequest(server string, params *GetApiV1ChangeRequestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/change_requests/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TicketIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ticket_ids", runtime.ParamLocationQuery, *params.TicketIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImplementorGroups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "implementor_groups", runtime.ParamLocationQuery, *params.ImplementorGroups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lob", runtime.ParamLocationQuery, *params.Lob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Country != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PtySessionState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pty_session_state", runtime.ParamLocationQuery, *params.PtySessionState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PtyTokenJoinRequest calls the generic PostApiV1PtyTokenJoin builder with application/json body
func NewPostApiV1PtyTokenJoinRequest(server string, body PostApiV1PtyTokenJoinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PtyTokenJoinRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PtyTokenJoinRequestWithBody generates requests for PostApiV1PtyTokenJoin with any type of body
func NewPostApiV1PtyTokenJoinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/pty_token/join")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PtyTokenStartRequest calls the generic PostApiV1PtyTokenStart builder with application/json body
func NewPostApiV1PtyTokenStartRequest(server string, body PostApiV1PtyTokenStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PtyTokenStartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PtyTokenStartRequestWithBody generates requests for PostApiV1PtyTokenStart with any type of body
func NewPostApiV1PtyTokenStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/pty_token/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1ChangeRequestsWithResponse request
	GetApiV1ChangeRequestsWithResponse(ctx context.Context, params *GetApiV1ChangeRequestsParams, reqEditors ...RequestEditorFn) (*GetApiV1ChangeRequestsResponse, error)

	// PostApiV1PtyTokenJoinWithBodyWithResponse request with any body
	PostApiV1PtyTokenJoinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenJoinResponse, error)

	PostApiV1PtyTokenJoinWithResponse(ctx context.Context, body PostApiV1PtyTokenJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenJoinResponse, error)

	// PostApiV1PtyTokenStartWithBodyWithResponse request with any body
	PostApiV1PtyTokenStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenStartResponse, error)

	PostApiV1PtyTokenStartWithResponse(ctx context.Context, body PostApiV1PtyTokenStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenStartResponse, error)
}

type GetApiV1ChangeRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ChangeRequestSessionsResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1ChangeRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ChangeRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PtyTokenJoinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1PtyTokenJoinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PtyTokenJoinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PtyTokenStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1PtyTokenStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PtyTokenStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1ChangeRequestsWithResponse request returning *GetApiV1ChangeRequestsResponse
func (c *ClientWithResponses) GetApiV1ChangeRequestsWithResponse(ctx context.Context, params *GetApiV1ChangeRequestsParams, reqEditors ...RequestEditorFn) (*GetApiV1ChangeRequestsResponse, error) {
	rsp, err := c.GetApiV1ChangeRequests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ChangeRequestsResponse(rsp)
}

// PostApiV1PtyTokenJoinWithBodyWithResponse request with arbitrary body returning *PostApiV1PtyTokenJoinResponse
func (c *ClientWithResponses) PostApiV1PtyTokenJoinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenJoinResponse, error) {
	rsp, err := c.PostApiV1PtyTokenJoinWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PtyTokenJoinResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PtyTokenJoinWithResponse(ctx context.Context, body PostApiV1PtyTokenJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenJoinResponse, error) {
	rsp, err := c.PostApiV1PtyTokenJoin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PtyTokenJoinResponse(rsp)
}

// PostApiV1PtyTokenStartWithBodyWithResponse request with arbitrary body returning *PostApiV1PtyTokenStartResponse
func (c *ClientWithResponses) PostApiV1PtyTokenStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenStartResponse, error) {
	rsp, err := c.PostApiV1PtyTokenStartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PtyTokenStartResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PtyTokenStartWithResponse(ctx context.Context, body PostApiV1PtyTokenStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PtyTokenStartResponse, error) {
	rsp, err := c.PostApiV1PtyTokenStart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PtyTokenStartResponse(rsp)
}

// ParseGetApiV1ChangeRequestsResponse parses an HTTP response from a GetApiV1ChangeRequestsWithResponse call
func ParseGetApiV1ChangeRequestsResponse(rsp *http.Response) (*GetApiV1ChangeRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ChangeRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ChangeRequestSessionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PtyTokenJoinResponse parses an HTTP response from a PostApiV1PtyTokenJoinWithResponse call
func ParsePostApiV1PtyTokenJoinResponse(rsp *http.Response) (*PostApiV1PtyTokenJoinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PtyTokenJoinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PtyTokenStartResponse parses an HTTP response from a PostApiV1PtyTokenStartWithResponse call
func ParsePostApiV1PtyTokenStartResponse(rsp *http.Response) (*PostApiV1PtyTokenStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PtyTokenStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get change request and associated PTY sessions
	// (GET /api/v1/change_requests/)
	GetApiV1ChangeRequests(c *gin.Context, params GetApiV1ChangeRequestsParams)
	// Mint a join token for an existing PTY session
	// (POST /api/v1/pty_token/join)
	PostApiV1PtyTokenJoin(c *gin.Context)
	// Mint a start token for a new PTY session
	// (POST /api/v1/pty_token/start)
	PostApiV1PtyTokenStart(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1ChangeRequests operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ChangeRequests(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1ChangeRequestsParams

	// ------------- Optional query parameter "ticket_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ticket_ids", c.Request.URL.Query(), &params.TicketIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticket_ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "implementor_groups" -------------

	err = runtime.BindQueryParameter("form", true, false, "implementor_groups", c.Request.URL.Query(), &params.ImplementorGroups)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter implementor_groups: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lob" -------------

	err = runtime.BindQueryParameter("form", true, false, "lob", c.Request.URL.Query(), &params.Lob)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lob: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "country" -------------

	err = runtime.BindQueryParameter("form", true, false, "country", c.Request.URL.Query(), &params.Country)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pty_session_state" -------------

	err = runtime.BindQueryParameter("form", true, false, "pty_session_state", c.Request.URL.Query(), &params.PtySessionState)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pty_session_state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1ChangeRequests(c, params)
}

// PostApiV1PtyTokenJoin operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1PtyTokenJoin(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1PtyTokenJoin(c)
}

// PostApiV1PtyTokenStart operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1PtyTokenStart(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1PtyTokenStart(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/change_requests/", wrapper.GetApiV1ChangeRequests)
	router.POST(options.BaseURL+"/api/v1/pty_token/join", wrapper.PostApiV1PtyTokenJoin)
	router.POST(options.BaseURL+"/api/v1/pty_token/start", wrapper.PostApiV1PtyTokenStart)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"G+kyHwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
