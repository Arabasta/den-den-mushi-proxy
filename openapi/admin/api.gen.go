// Package admin_oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package admin_oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for PtySessionState.
const (
	Active  PtySessionState = "active"
	Closed  PtySessionState = "closed"
	Created PtySessionState = "created"
)

// GetPtySessionResponse defines model for GetPtySessionResponse.
type GetPtySessionResponse struct {
	// EndTime End time of the PTY session in RFC3339 format
	EndTime *time.Time `json:"end_time,omitempty"`

	// Id Unique identifier for the PTY session
	Id *string `json:"id,omitempty"`

	// Implementors List of implementors' user IDs
	Implementors *[]string `json:"implementors,omitempty"`

	// Observers List of observers' user IDs
	Observers *[]string `json:"observers,omitempty"`

	// StartTime Start time of the PTY session in RFC3339 format
	StartTime *time.Time `json:"start_time,omitempty"`

	// State State of the PTY session
	State *PtySessionState `json:"state,omitempty"`

	// TargetServerHostname Hostname of the target server
	TargetServerHostname *string `json:"target_server_hostname,omitempty"`

	// TargetServerIp IP address of the target server
	TargetServerIp *string `json:"target_server_ip,omitempty"`

	// TicketId Ticket ID associated with the PTY session
	TicketId *string `json:"ticket_id,omitempty"`
}

// PtySessionState State of the PTY session
type PtySessionState string

// GetApiV1AdminPtySessionsParams defines parameters for GetApiV1AdminPtySessions.
type GetApiV1AdminPtySessionsParams struct {
	TicketIds            *[]string `form:"ticket_ids,omitempty" json:"ticket_ids,omitempty"`
	TargetServerHostname *string   `form:"target_server_hostname,omitempty" json:"target_server_hostname,omitempty"`
	TargetServerIp       *string   `form:"target_server_ip,omitempty" json:"target_server_ip,omitempty"`

	// Implementors userid of implementors
	Implementors *[]string `form:"implementors,omitempty" json:"implementors,omitempty"`

	// Observers userid of observers
	Observers *[]string `form:"observers,omitempty" json:"observers,omitempty"`

	// StartTime Expected format - RFC3339
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Expected format - RFC3339
	EndTime         *time.Time       `form:"end_time,omitempty" json:"end_time,omitempty"`
	PtySessionState *PtySessionState `form:"pty_session_state,omitempty" json:"pty_session_state,omitempty"`
	Page            *int             `form:"page,omitempty" json:"page,omitempty"`
	PageSize        *int             `form:"page_size,omitempty" json:"page_size,omitempty"`
	TotalCount      *bool            `form:"total_count,omitempty" json:"total_count,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1AdminPtySessions request
	GetApiV1AdminPtySessions(ctx context.Context, params *GetApiV1AdminPtySessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1AdminPtySessions(ctx context.Context, params *GetApiV1AdminPtySessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AdminPtySessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1AdminPtySessionsRequest generates requests for GetApiV1AdminPtySessions
func NewGetApiV1AdminPtySessionsRequest(server string, params *GetApiV1AdminPtySessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/pty_sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TicketIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ticket_ids", runtime.ParamLocationQuery, *params.TicketIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetServerHostname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_server_hostname", runtime.ParamLocationQuery, *params.TargetServerHostname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetServerIp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_server_ip", runtime.ParamLocationQuery, *params.TargetServerIp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Implementors != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "implementors", runtime.ParamLocationQuery, *params.Implementors); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Observers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observers", runtime.ParamLocationQuery, *params.Observers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PtySessionState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pty_session_state", runtime.ParamLocationQuery, *params.PtySessionState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TotalCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "total_count", runtime.ParamLocationQuery, *params.TotalCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1AdminPtySessionsWithResponse request
	GetApiV1AdminPtySessionsWithResponse(ctx context.Context, params *GetApiV1AdminPtySessionsParams, reqEditors ...RequestEditorFn) (*GetApiV1AdminPtySessionsResponse, error)
}

type GetApiV1AdminPtySessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GetPtySessionResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AdminPtySessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AdminPtySessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1AdminPtySessionsWithResponse request returning *GetApiV1AdminPtySessionsResponse
func (c *ClientWithResponses) GetApiV1AdminPtySessionsWithResponse(ctx context.Context, params *GetApiV1AdminPtySessionsParams, reqEditors ...RequestEditorFn) (*GetApiV1AdminPtySessionsResponse, error) {
	rsp, err := c.GetApiV1AdminPtySessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AdminPtySessionsResponse(rsp)
}

// ParseGetApiV1AdminPtySessionsResponse parses an HTTP response from a GetApiV1AdminPtySessionsWithResponse call
func ParseGetApiV1AdminPtySessionsResponse(rsp *http.Response) (*GetApiV1AdminPtySessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AdminPtySessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GetPtySessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all PTY sessions matching the filter
	// (GET /api/v1/admin/pty_sessions)
	GetApiV1AdminPtySessions(c *gin.Context, params GetApiV1AdminPtySessionsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1AdminPtySessions operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1AdminPtySessions(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1AdminPtySessionsParams

	// ------------- Optional query parameter "ticket_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ticket_ids", c.Request.URL.Query(), &params.TicketIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticket_ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "target_server_hostname" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_server_hostname", c.Request.URL.Query(), &params.TargetServerHostname)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter target_server_hostname: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "target_server_ip" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_server_ip", c.Request.URL.Query(), &params.TargetServerIp)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter target_server_ip: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "implementors" -------------

	err = runtime.BindQueryParameter("form", true, false, "implementors", c.Request.URL.Query(), &params.Implementors)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter implementors: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "observers" -------------

	err = runtime.BindQueryParameter("form", true, false, "observers", c.Request.URL.Query(), &params.Observers)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter observers: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end_time: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pty_session_state" -------------

	err = runtime.BindQueryParameter("form", true, false, "pty_session_state", c.Request.URL.Query(), &params.PtySessionState)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pty_session_state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "total_count" -------------

	err = runtime.BindQueryParameter("form", true, false, "total_count", c.Request.URL.Query(), &params.TotalCount)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter total_count: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1AdminPtySessions(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/admin/pty_sessions", wrapper.GetApiV1AdminPtySessions)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWb2/jtg/+KgJ/P2BvfLFzvWKb32X3Z+t2G4prt2EoikCR6UQ3W9JJdNesyHcfKDuJ",
	"Ezu9rtte5Q/F5yFF8qEeQNnaWYOGAuQPENQKaxm/fot0SesrDEFb8wGDsyYgG5y3Dj1pjMfQFHPSdbQU",
	"GJTXjrQ1kMNbUwi2CFsKWqG4vP5NhBZOaCM+vHt9dnb2tSitryVBAt2XHApJ+CJiJkBrh5BDIK/NEjYJ",
	"6GLI9LPRnxoUukBDutToGfSYcxSsdhXWaMj6MIR9rwNx8P1TX4gmoBcXbwIkoAnr6DcA7v6Q3ss1/7aL",
	"gP4OH2PZHXkmRSDp6UQprtj2HxQjkKRI93+PJeTwv3TfTmnXS+m+i67icY5d+iXSvE14vrKBjByL+7vO",
	"so269ROt31hAh8DaDSEvLoUsCo8hPB1Uq9+R5mOddx1N4uKNkCFYpSVhIf7QtPp89+1LaBcfUREzHV/V",
	"WCFprIaQAJqmhvwGlEeOAhKQivQd101VNmABt2MxBFSN17S+4mq1I/0NSo9+1tCKfy3ir3fbfvj+12tI",
	"Wp1gpNa6z25F5GDDwNqUdpjArKi1EbPLiziitTRyqc2yn0oQ0hRCWWNQsRNPAWmqsO8NCfCotJjTSTbJ",
	"4pQ5NNJpyOFskk3OIAEnaRVzSqXT6d00lYyQOlrPt3RsXSLxB+uaZM6LAnIWwJnTv0wj6b4yIcJ6WSPF",
	"eb55AM1RfGrQryGBtpP3TRO21yWZ4qnzvElOwI5PTp9iUOOnIGn3OYzDOrJE6eJYHVmwRqiOjjzvNk7x",
	"76V1nLxv/zeY3947VDzmrUSKF1vxPMHf0+V+AE8R2H9OvtvOz6EeA+xNzrxV/z7y31oDJynk8hC1wFI2",
	"FUE+TaDWRtcsdNNdyNoQLtE/DjgP+s8TqC+zBGp538Fm2fNIyJKs5so2hsZpSlkF3OEtrK1QGthsbhPw",
	"3esqNuTLLOMPZQ2hibIknau0isKUfgzcBw9jnfzY5Y8/5obdvkmOGu5AmD2S13iHhQiNUhhC2VRVfHy8",
	"yl4Ntf4nS6K0jSn4xHmb1tEyNoTeyKpbvgK9t/5gLUV9nTn9A67bhXRzyzcWmrqWft2qtJBVdbhBaklq",
	"xXuF12SpK2pXlFyyXsecuquA203L1j3ObgZPyxmvu8ZX3W4LeZreZ9NQ35OXUzkJbtJImhSLMFHWu/z8",
	"PMu+hOHgvrdKVgdIeZpW/CdreHT7CjizLshj/x95Ux6s/LDvvX5CQ+qe6+FW7Xm/3hlgc7v5KwAA//9E",
	"x5Z/FgwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
