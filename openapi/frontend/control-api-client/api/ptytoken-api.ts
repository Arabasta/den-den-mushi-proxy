/* tslint:disable */
/* eslint-disable */
/**
 * Control API
 * API for starting and joining PTY sessions. Currently also hosting all non-proxy related endpoints.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { JoinRequest } from '../models';
// @ts-ignore
import type { StartRequest } from '../models';
// @ts-ignore
import type { TokenResponse } from '../models';
/**
 * PTYTokenApi - axios parameter creator
 * @export
 */
export const PTYTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Mint a join token for an existing PTY session
         * @param {JoinRequest} joinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PtyTokenJoinPost: async (joinRequest: JoinRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'joinRequest' is not null or undefined
            assertParamExists('apiV1PtyTokenJoinPost', 'joinRequest', joinRequest)
            const localVarPath = `/api/v1/pty_token/join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mint a start token for a new PTY session
         * @param {StartRequest} startRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PtyTokenStartPost: async (startRequest: StartRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startRequest' is not null or undefined
            assertParamExists('apiV1PtyTokenStartPost', 'startRequest', startRequest)
            const localVarPath = `/api/v1/pty_token/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PTYTokenApi - functional programming interface
 * @export
 */
export const PTYTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PTYTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Mint a join token for an existing PTY session
         * @param {JoinRequest} joinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PtyTokenJoinPost(joinRequest: JoinRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PtyTokenJoinPost(joinRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PTYTokenApi.apiV1PtyTokenJoinPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Mint a start token for a new PTY session
         * @param {StartRequest} startRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PtyTokenStartPost(startRequest: StartRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PtyTokenStartPost(startRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PTYTokenApi.apiV1PtyTokenStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PTYTokenApi - factory interface
 * @export
 */
export const PTYTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PTYTokenApiFp(configuration)
    return {
        /**
         * 
         * @summary Mint a join token for an existing PTY session
         * @param {PTYTokenApiApiV1PtyTokenJoinPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PtyTokenJoinPost(requestParameters: PTYTokenApiApiV1PtyTokenJoinPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.apiV1PtyTokenJoinPost(requestParameters.joinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mint a start token for a new PTY session
         * @param {PTYTokenApiApiV1PtyTokenStartPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PtyTokenStartPost(requestParameters: PTYTokenApiApiV1PtyTokenStartPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.apiV1PtyTokenStartPost(requestParameters.startRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1PtyTokenJoinPost operation in PTYTokenApi.
 * @export
 * @interface PTYTokenApiApiV1PtyTokenJoinPostRequest
 */
export interface PTYTokenApiApiV1PtyTokenJoinPostRequest {
    /**
     * 
     * @type {JoinRequest}
     * @memberof PTYTokenApiApiV1PtyTokenJoinPost
     */
    readonly joinRequest: JoinRequest
}

/**
 * Request parameters for apiV1PtyTokenStartPost operation in PTYTokenApi.
 * @export
 * @interface PTYTokenApiApiV1PtyTokenStartPostRequest
 */
export interface PTYTokenApiApiV1PtyTokenStartPostRequest {
    /**
     * 
     * @type {StartRequest}
     * @memberof PTYTokenApiApiV1PtyTokenStartPost
     */
    readonly startRequest: StartRequest
}

/**
 * PTYTokenApi - object-oriented interface
 * @export
 * @class PTYTokenApi
 * @extends {BaseAPI}
 */
export class PTYTokenApi extends BaseAPI {
    /**
     * 
     * @summary Mint a join token for an existing PTY session
     * @param {PTYTokenApiApiV1PtyTokenJoinPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PTYTokenApi
     */
    public apiV1PtyTokenJoinPost(requestParameters: PTYTokenApiApiV1PtyTokenJoinPostRequest, options?: RawAxiosRequestConfig) {
        return PTYTokenApiFp(this.configuration).apiV1PtyTokenJoinPost(requestParameters.joinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mint a start token for a new PTY session
     * @param {PTYTokenApiApiV1PtyTokenStartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PTYTokenApi
     */
    public apiV1PtyTokenStartPost(requestParameters: PTYTokenApiApiV1PtyTokenStartPostRequest, options?: RawAxiosRequestConfig) {
        return PTYTokenApiFp(this.configuration).apiV1PtyTokenStartPost(requestParameters.startRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

