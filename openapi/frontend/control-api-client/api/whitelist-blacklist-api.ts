/* tslint:disable */
/* eslint-disable */
/**
 * Control API
 * API for starting and joining PTY sessions. Currently also hosting all non-proxy related endpoints.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiV1WhitelistRegexIdPutRequest } from '../models';
// @ts-ignore
import type { ApiV1WhitelistRegexPostRequest } from '../models';
// @ts-ignore
import type { RegexFilter } from '../models';
/**
 * WhitelistBlacklistApi - axios parameter creator
 * @export
 */
export const WhitelistBlacklistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all blacklist regex filters for healthcheck ou group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BlacklistRegexGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/blacklist/regex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Soft delete a blacklist regex filter
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BlacklistRegexIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1BlacklistRegexIdDelete', 'id', id)
            const localVarPath = `/api/v1/blacklist/regex/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a blacklist regex filter
         * @param {number} id 
         * @param {ApiV1WhitelistRegexIdPutRequest} apiV1WhitelistRegexIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BlacklistRegexIdPut: async (id: number, apiV1WhitelistRegexIdPutRequest: ApiV1WhitelistRegexIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1BlacklistRegexIdPut', 'id', id)
            // verify required parameter 'apiV1WhitelistRegexIdPutRequest' is not null or undefined
            assertParamExists('apiV1BlacklistRegexIdPut', 'apiV1WhitelistRegexIdPutRequest', apiV1WhitelistRegexIdPutRequest)
            const localVarPath = `/api/v1/blacklist/regex/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WhitelistRegexIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a regex to blacklist for healthcheck ou group
         * @param {ApiV1WhitelistRegexPostRequest} apiV1WhitelistRegexPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BlacklistRegexPost: async (apiV1WhitelistRegexPostRequest: ApiV1WhitelistRegexPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1WhitelistRegexPostRequest' is not null or undefined
            assertParamExists('apiV1BlacklistRegexPost', 'apiV1WhitelistRegexPostRequest', apiV1WhitelistRegexPostRequest)
            const localVarPath = `/api/v1/blacklist/regex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WhitelistRegexPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all whitelist regex filters for healthcheck ou group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WhitelistRegexGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/whitelist/regex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Soft delete a whitelist regex filter
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WhitelistRegexIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1WhitelistRegexIdDelete', 'id', id)
            const localVarPath = `/api/v1/whitelist/regex/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a whitelist regex filter
         * @param {number} id 
         * @param {ApiV1WhitelistRegexIdPutRequest} apiV1WhitelistRegexIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WhitelistRegexIdPut: async (id: number, apiV1WhitelistRegexIdPutRequest: ApiV1WhitelistRegexIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1WhitelistRegexIdPut', 'id', id)
            // verify required parameter 'apiV1WhitelistRegexIdPutRequest' is not null or undefined
            assertParamExists('apiV1WhitelistRegexIdPut', 'apiV1WhitelistRegexIdPutRequest', apiV1WhitelistRegexIdPutRequest)
            const localVarPath = `/api/v1/whitelist/regex/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WhitelistRegexIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a regex to whitelist for healthcheck ou group
         * @param {ApiV1WhitelistRegexPostRequest} apiV1WhitelistRegexPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WhitelistRegexPost: async (apiV1WhitelistRegexPostRequest: ApiV1WhitelistRegexPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1WhitelistRegexPostRequest' is not null or undefined
            assertParamExists('apiV1WhitelistRegexPost', 'apiV1WhitelistRegexPostRequest', apiV1WhitelistRegexPostRequest)
            const localVarPath = `/api/v1/whitelist/regex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WhitelistRegexPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WhitelistBlacklistApi - functional programming interface
 * @export
 */
export const WhitelistBlacklistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WhitelistBlacklistApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all blacklist regex filters for healthcheck ou group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BlacklistRegexGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RegexFilter>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BlacklistRegexGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhitelistBlacklistApi.apiV1BlacklistRegexGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Soft delete a blacklist regex filter
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BlacklistRegexIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BlacklistRegexIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhitelistBlacklistApi.apiV1BlacklistRegexIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a blacklist regex filter
         * @param {number} id 
         * @param {ApiV1WhitelistRegexIdPutRequest} apiV1WhitelistRegexIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BlacklistRegexIdPut(id: number, apiV1WhitelistRegexIdPutRequest: ApiV1WhitelistRegexIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegexFilter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BlacklistRegexIdPut(id, apiV1WhitelistRegexIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhitelistBlacklistApi.apiV1BlacklistRegexIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a regex to blacklist for healthcheck ou group
         * @param {ApiV1WhitelistRegexPostRequest} apiV1WhitelistRegexPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BlacklistRegexPost(apiV1WhitelistRegexPostRequest: ApiV1WhitelistRegexPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegexFilter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BlacklistRegexPost(apiV1WhitelistRegexPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhitelistBlacklistApi.apiV1BlacklistRegexPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all whitelist regex filters for healthcheck ou group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WhitelistRegexGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RegexFilter>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WhitelistRegexGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhitelistBlacklistApi.apiV1WhitelistRegexGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Soft delete a whitelist regex filter
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WhitelistRegexIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WhitelistRegexIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhitelistBlacklistApi.apiV1WhitelistRegexIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a whitelist regex filter
         * @param {number} id 
         * @param {ApiV1WhitelistRegexIdPutRequest} apiV1WhitelistRegexIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WhitelistRegexIdPut(id: number, apiV1WhitelistRegexIdPutRequest: ApiV1WhitelistRegexIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegexFilter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WhitelistRegexIdPut(id, apiV1WhitelistRegexIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhitelistBlacklistApi.apiV1WhitelistRegexIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a regex to whitelist for healthcheck ou group
         * @param {ApiV1WhitelistRegexPostRequest} apiV1WhitelistRegexPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WhitelistRegexPost(apiV1WhitelistRegexPostRequest: ApiV1WhitelistRegexPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegexFilter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WhitelistRegexPost(apiV1WhitelistRegexPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhitelistBlacklistApi.apiV1WhitelistRegexPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WhitelistBlacklistApi - factory interface
 * @export
 */
export const WhitelistBlacklistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WhitelistBlacklistApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all blacklist regex filters for healthcheck ou group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BlacklistRegexGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<RegexFilter>> {
            return localVarFp.apiV1BlacklistRegexGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Soft delete a blacklist regex filter
         * @param {WhitelistBlacklistApiApiV1BlacklistRegexIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BlacklistRegexIdDelete(requestParameters: WhitelistBlacklistApiApiV1BlacklistRegexIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1BlacklistRegexIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a blacklist regex filter
         * @param {WhitelistBlacklistApiApiV1BlacklistRegexIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BlacklistRegexIdPut(requestParameters: WhitelistBlacklistApiApiV1BlacklistRegexIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegexFilter> {
            return localVarFp.apiV1BlacklistRegexIdPut(requestParameters.id, requestParameters.apiV1WhitelistRegexIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a regex to blacklist for healthcheck ou group
         * @param {WhitelistBlacklistApiApiV1BlacklistRegexPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BlacklistRegexPost(requestParameters: WhitelistBlacklistApiApiV1BlacklistRegexPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegexFilter> {
            return localVarFp.apiV1BlacklistRegexPost(requestParameters.apiV1WhitelistRegexPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all whitelist regex filters for healthcheck ou group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WhitelistRegexGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<RegexFilter>> {
            return localVarFp.apiV1WhitelistRegexGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Soft delete a whitelist regex filter
         * @param {WhitelistBlacklistApiApiV1WhitelistRegexIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WhitelistRegexIdDelete(requestParameters: WhitelistBlacklistApiApiV1WhitelistRegexIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1WhitelistRegexIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a whitelist regex filter
         * @param {WhitelistBlacklistApiApiV1WhitelistRegexIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WhitelistRegexIdPut(requestParameters: WhitelistBlacklistApiApiV1WhitelistRegexIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegexFilter> {
            return localVarFp.apiV1WhitelistRegexIdPut(requestParameters.id, requestParameters.apiV1WhitelistRegexIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a regex to whitelist for healthcheck ou group
         * @param {WhitelistBlacklistApiApiV1WhitelistRegexPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WhitelistRegexPost(requestParameters: WhitelistBlacklistApiApiV1WhitelistRegexPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegexFilter> {
            return localVarFp.apiV1WhitelistRegexPost(requestParameters.apiV1WhitelistRegexPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1BlacklistRegexIdDelete operation in WhitelistBlacklistApi.
 * @export
 * @interface WhitelistBlacklistApiApiV1BlacklistRegexIdDeleteRequest
 */
export interface WhitelistBlacklistApiApiV1BlacklistRegexIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof WhitelistBlacklistApiApiV1BlacklistRegexIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV1BlacklistRegexIdPut operation in WhitelistBlacklistApi.
 * @export
 * @interface WhitelistBlacklistApiApiV1BlacklistRegexIdPutRequest
 */
export interface WhitelistBlacklistApiApiV1BlacklistRegexIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof WhitelistBlacklistApiApiV1BlacklistRegexIdPut
     */
    readonly id: number

    /**
     * 
     * @type {ApiV1WhitelistRegexIdPutRequest}
     * @memberof WhitelistBlacklistApiApiV1BlacklistRegexIdPut
     */
    readonly apiV1WhitelistRegexIdPutRequest: ApiV1WhitelistRegexIdPutRequest
}

/**
 * Request parameters for apiV1BlacklistRegexPost operation in WhitelistBlacklistApi.
 * @export
 * @interface WhitelistBlacklistApiApiV1BlacklistRegexPostRequest
 */
export interface WhitelistBlacklistApiApiV1BlacklistRegexPostRequest {
    /**
     * 
     * @type {ApiV1WhitelistRegexPostRequest}
     * @memberof WhitelistBlacklistApiApiV1BlacklistRegexPost
     */
    readonly apiV1WhitelistRegexPostRequest: ApiV1WhitelistRegexPostRequest
}

/**
 * Request parameters for apiV1WhitelistRegexIdDelete operation in WhitelistBlacklistApi.
 * @export
 * @interface WhitelistBlacklistApiApiV1WhitelistRegexIdDeleteRequest
 */
export interface WhitelistBlacklistApiApiV1WhitelistRegexIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof WhitelistBlacklistApiApiV1WhitelistRegexIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV1WhitelistRegexIdPut operation in WhitelistBlacklistApi.
 * @export
 * @interface WhitelistBlacklistApiApiV1WhitelistRegexIdPutRequest
 */
export interface WhitelistBlacklistApiApiV1WhitelistRegexIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof WhitelistBlacklistApiApiV1WhitelistRegexIdPut
     */
    readonly id: number

    /**
     * 
     * @type {ApiV1WhitelistRegexIdPutRequest}
     * @memberof WhitelistBlacklistApiApiV1WhitelistRegexIdPut
     */
    readonly apiV1WhitelistRegexIdPutRequest: ApiV1WhitelistRegexIdPutRequest
}

/**
 * Request parameters for apiV1WhitelistRegexPost operation in WhitelistBlacklistApi.
 * @export
 * @interface WhitelistBlacklistApiApiV1WhitelistRegexPostRequest
 */
export interface WhitelistBlacklistApiApiV1WhitelistRegexPostRequest {
    /**
     * 
     * @type {ApiV1WhitelistRegexPostRequest}
     * @memberof WhitelistBlacklistApiApiV1WhitelistRegexPost
     */
    readonly apiV1WhitelistRegexPostRequest: ApiV1WhitelistRegexPostRequest
}

/**
 * WhitelistBlacklistApi - object-oriented interface
 * @export
 * @class WhitelistBlacklistApi
 * @extends {BaseAPI}
 */
export class WhitelistBlacklistApi extends BaseAPI {
    /**
     * 
     * @summary Get all blacklist regex filters for healthcheck ou group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistBlacklistApi
     */
    public apiV1BlacklistRegexGet(options?: RawAxiosRequestConfig) {
        return WhitelistBlacklistApiFp(this.configuration).apiV1BlacklistRegexGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Soft delete a blacklist regex filter
     * @param {WhitelistBlacklistApiApiV1BlacklistRegexIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistBlacklistApi
     */
    public apiV1BlacklistRegexIdDelete(requestParameters: WhitelistBlacklistApiApiV1BlacklistRegexIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return WhitelistBlacklistApiFp(this.configuration).apiV1BlacklistRegexIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a blacklist regex filter
     * @param {WhitelistBlacklistApiApiV1BlacklistRegexIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistBlacklistApi
     */
    public apiV1BlacklistRegexIdPut(requestParameters: WhitelistBlacklistApiApiV1BlacklistRegexIdPutRequest, options?: RawAxiosRequestConfig) {
        return WhitelistBlacklistApiFp(this.configuration).apiV1BlacklistRegexIdPut(requestParameters.id, requestParameters.apiV1WhitelistRegexIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a regex to blacklist for healthcheck ou group
     * @param {WhitelistBlacklistApiApiV1BlacklistRegexPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistBlacklistApi
     */
    public apiV1BlacklistRegexPost(requestParameters: WhitelistBlacklistApiApiV1BlacklistRegexPostRequest, options?: RawAxiosRequestConfig) {
        return WhitelistBlacklistApiFp(this.configuration).apiV1BlacklistRegexPost(requestParameters.apiV1WhitelistRegexPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all whitelist regex filters for healthcheck ou group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistBlacklistApi
     */
    public apiV1WhitelistRegexGet(options?: RawAxiosRequestConfig) {
        return WhitelistBlacklistApiFp(this.configuration).apiV1WhitelistRegexGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Soft delete a whitelist regex filter
     * @param {WhitelistBlacklistApiApiV1WhitelistRegexIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistBlacklistApi
     */
    public apiV1WhitelistRegexIdDelete(requestParameters: WhitelistBlacklistApiApiV1WhitelistRegexIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return WhitelistBlacklistApiFp(this.configuration).apiV1WhitelistRegexIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a whitelist regex filter
     * @param {WhitelistBlacklistApiApiV1WhitelistRegexIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistBlacklistApi
     */
    public apiV1WhitelistRegexIdPut(requestParameters: WhitelistBlacklistApiApiV1WhitelistRegexIdPutRequest, options?: RawAxiosRequestConfig) {
        return WhitelistBlacklistApiFp(this.configuration).apiV1WhitelistRegexIdPut(requestParameters.id, requestParameters.apiV1WhitelistRegexIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a regex to whitelist for healthcheck ou group
     * @param {WhitelistBlacklistApiApiV1WhitelistRegexPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistBlacklistApi
     */
    public apiV1WhitelistRegexPost(requestParameters: WhitelistBlacklistApiApiV1WhitelistRegexPostRequest, options?: RawAxiosRequestConfig) {
        return WhitelistBlacklistApiFp(this.configuration).apiV1WhitelistRegexPost(requestParameters.apiV1WhitelistRegexPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

