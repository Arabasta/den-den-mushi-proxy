/* tslint:disable */
/* eslint-disable */
/**
 * Control API
 * API for starting and joining PTY sessions. Currently also hosting all non-proxy related endpoints.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ChangeRequestSessionsResponse } from '../models';
// @ts-ignore
import type { PtySessionState } from '../models';
/**
 * MakeChangeApi - axios parameter creator
 * @export
 */
export const MakeChangeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all APPROVED Change Requests associated with the user\'s implementor group and associated PTY sessions and connections Implementor group is retrieved from the user\'s id provided by the authentication token.
         * @summary Get change request and associated PTY sessions
         * @param {Array<string>} [ticketIds] 
         * @param {Array<string>} [implementorGroups] 
         * @param {string} [lob] 
         * @param {string} [country] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {PtySessionState} [ptySessionState] Does not filter out CRs, field not for users
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChangeRequestsGet: async (ticketIds?: Array<string>, implementorGroups?: Array<string>, lob?: string, country?: string, startTime?: string, endTime?: string, ptySessionState?: PtySessionState, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/change_requests/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (ticketIds) {
                localVarQueryParameter['ticket_ids'] = ticketIds;
            }

            if (implementorGroups) {
                localVarQueryParameter['implementor_groups'] = implementorGroups;
            }

            if (lob !== undefined) {
                localVarQueryParameter['lob'] = lob;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (ptySessionState !== undefined) {
                localVarQueryParameter['pty_session_state'] = ptySessionState;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MakeChangeApi - functional programming interface
 * @export
 */
export const MakeChangeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MakeChangeApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all APPROVED Change Requests associated with the user\'s implementor group and associated PTY sessions and connections Implementor group is retrieved from the user\'s id provided by the authentication token.
         * @summary Get change request and associated PTY sessions
         * @param {Array<string>} [ticketIds] 
         * @param {Array<string>} [implementorGroups] 
         * @param {string} [lob] 
         * @param {string} [country] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {PtySessionState} [ptySessionState] Does not filter out CRs, field not for users
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChangeRequestsGet(ticketIds?: Array<string>, implementorGroups?: Array<string>, lob?: string, country?: string, startTime?: string, endTime?: string, ptySessionState?: PtySessionState, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChangeRequestSessionsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ChangeRequestsGet(ticketIds, implementorGroups, lob, country, startTime, endTime, ptySessionState, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MakeChangeApi.apiV1ChangeRequestsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MakeChangeApi - factory interface
 * @export
 */
export const MakeChangeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MakeChangeApiFp(configuration)
    return {
        /**
         * Returns all APPROVED Change Requests associated with the user\'s implementor group and associated PTY sessions and connections Implementor group is retrieved from the user\'s id provided by the authentication token.
         * @summary Get change request and associated PTY sessions
         * @param {MakeChangeApiApiV1ChangeRequestsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChangeRequestsGet(requestParameters: MakeChangeApiApiV1ChangeRequestsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<ChangeRequestSessionsResponse>> {
            return localVarFp.apiV1ChangeRequestsGet(requestParameters.ticketIds, requestParameters.implementorGroups, requestParameters.lob, requestParameters.country, requestParameters.startTime, requestParameters.endTime, requestParameters.ptySessionState, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1ChangeRequestsGet operation in MakeChangeApi.
 * @export
 * @interface MakeChangeApiApiV1ChangeRequestsGetRequest
 */
export interface MakeChangeApiApiV1ChangeRequestsGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof MakeChangeApiApiV1ChangeRequestsGet
     */
    readonly ticketIds?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof MakeChangeApiApiV1ChangeRequestsGet
     */
    readonly implementorGroups?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof MakeChangeApiApiV1ChangeRequestsGet
     */
    readonly lob?: string

    /**
     * 
     * @type {string}
     * @memberof MakeChangeApiApiV1ChangeRequestsGet
     */
    readonly country?: string

    /**
     * 
     * @type {string}
     * @memberof MakeChangeApiApiV1ChangeRequestsGet
     */
    readonly startTime?: string

    /**
     * 
     * @type {string}
     * @memberof MakeChangeApiApiV1ChangeRequestsGet
     */
    readonly endTime?: string

    /**
     * Does not filter out CRs, field not for users
     * @type {PtySessionState}
     * @memberof MakeChangeApiApiV1ChangeRequestsGet
     */
    readonly ptySessionState?: PtySessionState

    /**
     * 
     * @type {number}
     * @memberof MakeChangeApiApiV1ChangeRequestsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof MakeChangeApiApiV1ChangeRequestsGet
     */
    readonly pageSize?: number
}

/**
 * MakeChangeApi - object-oriented interface
 * @export
 * @class MakeChangeApi
 * @extends {BaseAPI}
 */
export class MakeChangeApi extends BaseAPI {
    /**
     * Returns all APPROVED Change Requests associated with the user\'s implementor group and associated PTY sessions and connections Implementor group is retrieved from the user\'s id provided by the authentication token.
     * @summary Get change request and associated PTY sessions
     * @param {MakeChangeApiApiV1ChangeRequestsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MakeChangeApi
     */
    public apiV1ChangeRequestsGet(requestParameters: MakeChangeApiApiV1ChangeRequestsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return MakeChangeApiFp(this.configuration).apiV1ChangeRequestsGet(requestParameters.ticketIds, requestParameters.implementorGroups, requestParameters.lob, requestParameters.country, requestParameters.startTime, requestParameters.endTime, requestParameters.ptySessionState, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}

