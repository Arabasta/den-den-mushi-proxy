/**
 * Control API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ChangeRequestSessionsResponse } from '../model/changeRequestSessionsResponse';
// @ts-ignore
import { PtySessionState } from '../model/ptySessionState';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class MakeChangeService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Get change request and associated PTY sessions
     * Returns all APPROVED Change Requests associated with the user\&#39;s implementor group and associated PTY sessions and connections Implementor group is retrieved from the user\&#39;s id provided by the authentication token.
     * @param ticketIds 
     * @param implementorGroups 
     * @param lob 
     * @param country 
     * @param startTime Expected format - RFC3339
     * @param endTime Expected format - RFC3339
     * @param ptySessionState Does not filter out CRs, field not for users
     * @param page 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1ChangeRequestsGet(ticketIds?: Array<string>, implementorGroups?: Array<string>, lob?: string, country?: string, startTime?: string, endTime?: string, ptySessionState?: PtySessionState, page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<ChangeRequestSessionsResponse>>;
    public apiV1ChangeRequestsGet(ticketIds?: Array<string>, implementorGroups?: Array<string>, lob?: string, country?: string, startTime?: string, endTime?: string, ptySessionState?: PtySessionState, page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<ChangeRequestSessionsResponse>>>;
    public apiV1ChangeRequestsGet(ticketIds?: Array<string>, implementorGroups?: Array<string>, lob?: string, country?: string, startTime?: string, endTime?: string, ptySessionState?: PtySessionState, page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<ChangeRequestSessionsResponse>>>;
    public apiV1ChangeRequestsGet(ticketIds?: Array<string>, implementorGroups?: Array<string>, lob?: string, country?: string, startTime?: string, endTime?: string, ptySessionState?: PtySessionState, page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ticketIds) {
            ticketIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ticket_ids');
            })
        }
        if (implementorGroups) {
            implementorGroups.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'implementor_groups');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>lob, 'lob');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>country, 'country');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>startTime, 'start_time');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>endTime, 'end_time');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ptySessionState, 'pty_session_state');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');

        let localVarHeaders = this.defaultHeaders;

        // authentication (BearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('BearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/change_requests/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<ChangeRequestSessionsResponse>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
